{"ast":null,"code":"import extraerPrefijos from \"./extraerPrefijo\";\nimport { sulfuro } from \"./palabrasClaves\"; //Función que comprueba si es un hidruro\n\nfunction averiguarHalogenosYAnfigenos(texto, mapa, prefijoHidrogeno, elementosDisponibles) {\n  //Array de cartas de todos los Halógenos y Anfígenos\n  var cartasHidracidos = encontrarEnBancaAnfigenosYHalogenos(); //Separa el texto en palabras y coge la primera\n\n  var primerElemento = texto.split(\" \")[0]; //Almacena el elemento sin el prefijo\n\n  var primerElementoSinPrefijoConSufijo = extraerPrefijos(primerElemento); //Almacena el prefijo del Primer Elemento\n\n  var prefijoPrimerElemento; //Primer elmento almacenado correctamente\n\n  var elemento1;\n\n  for (var i = 0; i < cartasHidracidos.length; i++) {\n    //Primer elemento\n    switch (primerElementoSinPrefijoConSufijo.substr(0, 2)) {\n      case cartasHidracidos[i].nombre.toLowerCase().substr(0, 2):\n        elemento1 = cartasHidracidos[i].nombre.toLowerCase();\n        break;\n\n      case sulfuro.substr(0, 2):\n        elemento1 = \"azufre\";\n        break;\n    }\n  }\n\n  if (elemento1 === undefined) {\n    return false;\n  }\n\n  if (primerElemento.startsWith(elemento1.substr(0, 2)) || elemento1 === \"azufre\") {\n    prefijoPrimerElemento = 1;\n  } else {\n    prefijoPrimerElemento = encontrarPrefijo(primerElemento.split(elemento1)[0]);\n  }\n\n  if (elemento1.grupo < 16) {\n    return false;\n  }\n\n  const salida = comprobarSiPuedeGenerarCompuestos(elemento1, prefijoPrimerElemento, \"hidrógeno\", prefijoHidrogeno, mapa);\n\n  if (typeof salida === \"number\") {\n    const elementosUsados = [\"hidrógeno\", elemento1];\n    const repeticionesElementosUsados = [prefijoHidrogeno, prefijoPrimerElemento];\n    const mapaCompuesto = crearMapaCompuesto(elementosUsados, repeticionesElementosUsados);\n    descartarCartasUsadas(mapaCompuesto, elementosDisponibles);\n    return salida;\n  } else {\n    return false;\n  }\n\n  function encontrarEnBancaAnfigenosYHalogenos() {\n    var arrayDeHidracidos = [];\n    elemento1;\n\n    for (var i = 0; i < elementosDisponibles.length; i++) {\n      if (elementosDisponibles[i].grupo === 16 || elementosDisponibles[i].grupo === 17) {\n        arrayDeHidracidos.push(elementosDisponibles[i]);\n      }\n    }\n\n    return arrayDeHidracidos;\n  }\n}\n\nexport default averiguarHalogenosYAnfigenos;","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/src/averiguarHalogenosAnfigenos.js"],"names":["extraerPrefijos","sulfuro","averiguarHalogenosYAnfigenos","texto","mapa","prefijoHidrogeno","elementosDisponibles","cartasHidracidos","encontrarEnBancaAnfigenosYHalogenos","primerElemento","split","primerElementoSinPrefijoConSufijo","prefijoPrimerElemento","elemento1","i","length","substr","nombre","toLowerCase","undefined","startsWith","encontrarPrefijo","grupo","salida","comprobarSiPuedeGenerarCompuestos","elementosUsados","repeticionesElementosUsados","mapaCompuesto","crearMapaCompuesto","descartarCartasUsadas","arrayDeHidracidos","push"],"mappings":"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","sourcesContent":["\nimport extraerPrefijos from \"./extraerPrefijo\";\nimport { sulfuro } from \"./palabrasClaves\";\n\n//Función que comprueba si es un hidruro\nfunction averiguarHalogenosYAnfigenos(texto, mapa, prefijoHidrogeno, elementosDisponibles) {\n\n    //Array de cartas de todos los Halógenos y Anfígenos\n    var cartasHidracidos = encontrarEnBancaAnfigenosYHalogenos();\n\n    //Separa el texto en palabras y coge la primera\n    var primerElemento = texto.split(\" \")[0];\n\n    //Almacena el elemento sin el prefijo\n    var primerElementoSinPrefijoConSufijo = extraerPrefijos(primerElemento);\n\n    //Almacena el prefijo del Primer Elemento\n    var prefijoPrimerElemento;\n\n    //Primer elmento almacenado correctamente\n    var elemento1;\n\n    for (var i = 0; i < cartasHidracidos.length; i++) {\n\n        //Primer elemento\n        switch (primerElementoSinPrefijoConSufijo.substr(0, 2)) {\n\n            case cartasHidracidos[i].nombre.toLowerCase().substr(0, 2):\n\n                elemento1 = cartasHidracidos[i].nombre.toLowerCase();\n\n                break;\n\n            case sulfuro.substr(0, 2):\n\n                elemento1 = \"azufre\";\n\n                break;\n        }\n    }\n\n    if (elemento1 === undefined) {\n\n        return false;\n\n    }\n\n    if (primerElemento.startsWith(elemento1.substr(0, 2)) || elemento1 === \"azufre\") {\n\n        prefijoPrimerElemento = 1;\n    }\n\n    else {\n        prefijoPrimerElemento = encontrarPrefijo(primerElemento.split(elemento1)[0]);\n\n\n    }\n    if (elemento1.grupo < 16) {\n\n        return false;\n\n    }\n\n\n    const salida = comprobarSiPuedeGenerarCompuestos(elemento1, prefijoPrimerElemento, \"hidrógeno\", prefijoHidrogeno, mapa);\n\n    if (typeof salida === \"number\") {\n\n        const elementosUsados = [\"hidrógeno\", elemento1];\n\n        const repeticionesElementosUsados = [prefijoHidrogeno, prefijoPrimerElemento];\n\n        const mapaCompuesto = crearMapaCompuesto(elementosUsados, repeticionesElementosUsados);\n\n        descartarCartasUsadas(mapaCompuesto, elementosDisponibles);\n\n        return salida\n\n    } else {\n\n\n        return false\n\n    }\n\n    function encontrarEnBancaAnfigenosYHalogenos() {\n\n        var arrayDeHidracidos = []; elemento1\n\n        for (var i = 0; i < elementosDisponibles.length; i++) {\n\n            if (elementosDisponibles[i].grupo === 16 || elementosDisponibles[i].grupo === 17) {\n\n                arrayDeHidracidos.push(elementosDisponibles[i]);\n\n            }\n\n        }\n\n        return arrayDeHidracidos;\n\n    }\n\n}\n\nexport default averiguarHalogenosYAnfigenos;"]},"metadata":{},"sourceType":"module"}