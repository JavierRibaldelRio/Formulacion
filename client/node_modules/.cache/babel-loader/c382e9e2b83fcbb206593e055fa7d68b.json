{"ast":null,"code":"//Función que elimina las cartas usadas\nfunction descartarCartasUsadas(mapaCompuesto, elementosEnBanca) {\n  var totalDeCartasUsadas; //VAriable que almacena la suma de valores\n\n  var arrayValores = []; //Matriz que almacena todos los valores\n  //El valor es el numero de repeticiones y la clave el elemento\n\n  mapaCompuesto.forEach(function (valor, clave) {\n    arrayValores.push(valor);\n\n    for (var i = 0; i < elementosEnBanca.length; i++) {\n      if (clave === elementosEnBanca[i].nombre.toLocaleLowerCase()) {\n        elementosEnBanca.splice(i, valor); //Comprovar si carta robado no esta definida\n\n        if (cartaRobada != undefined) {\n          if (elementosEnBanca[i + 1] === undefined) {\n            cartaRobarUsada = true;\n          } //Si el nombre de la carta robada es igual a la clave   \n          else if (cartaRobada.nombre.toLocaleLowerCase() === clave && elementosEnBanca[i + 1].nombre.toLocaleLowerCase() != clave) {\n              cartaRobarUsada = true;\n            }\n        } //Evitar la repetición del bucle\n\n\n        i = 10;\n      }\n    }\n  });\n  totalDeCartasUsadas = sumarArray(arrayValores);\n  cartasDisponibles = elementosEnBanca;\n\n  if (cartasDisponibles.length < 8) {\n    cartaRobarUsada = true;\n    const cartasARobar = 8 - cartasDisponibles.length;\n\n    for (var i = 0; i < cartasARobar; i++) {\n      //Añadir la primera carta a la banca\n      cartasDisponibles.push(baraja.splice(2, 1)[0]); //Eliminar la segunda carta de la baraja\n      //Prdena\n\n      cartasDisponibles.sort(function (a, b) {\n        if (a.z > b.z) {\n          return 1;\n        } else if (a.z < b.z) {\n          return -1;\n        } else {\n          return 0;\n        }\n      });\n      console.log(cartaRobarUsada);\n    }\n  }\n} //Funcion sumar un array\n\n\nfunction sumarArray(arr) {\n  var suma;\n\n  for (var i = 0; i < arr.length; i++) {\n    suma = +arr[i];\n  }\n\n  return suma;\n}","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/src/eliminarCompuestos.js"],"names":["descartarCartasUsadas","mapaCompuesto","elementosEnBanca","totalDeCartasUsadas","arrayValores","forEach","valor","clave","push","i","length","nombre","toLocaleLowerCase","splice","cartaRobada","undefined","cartaRobarUsada","sumarArray","cartasDisponibles","cartasARobar","baraja","sort","a","b","z","console","log","arr","suma"],"mappings":"AAAA;AAEA,SAASA,qBAAT,CAA+BC,aAA/B,EAA8CC,gBAA9C,EAAgE;AAE5D,MAAIC,mBAAJ,CAF4D,CAEhC;;AAE5B,MAAIC,YAAY,GAAG,EAAnB,CAJ4D,CAInC;AAEzB;;AACAH,EAAAA,aAAa,CAACI,OAAd,CAAsB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAE1CH,IAAAA,YAAY,CAACI,IAAb,CAAkBF,KAAlB;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,gBAAgB,CAACQ,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAE9C,UAAIF,KAAK,KAAKL,gBAAgB,CAACO,CAAD,CAAhB,CAAoBE,MAApB,CAA2BC,iBAA3B,EAAd,EAA8D;AAE1DV,QAAAA,gBAAgB,CAACW,MAAjB,CAAwBJ,CAAxB,EAA2BH,KAA3B,EAF0D,CAI1D;;AAEA,YAAIQ,WAAW,IAAIC,SAAnB,EAA8B;AAE1B,cAAIb,gBAAgB,CAACO,CAAC,GAAG,CAAL,CAAhB,KAA4BM,SAAhC,EAA2C;AACvCC,YAAAA,eAAe,GAAG,IAAlB;AAEH,WAHD,CAKA;AALA,eAMK,IAAIF,WAAW,CAACH,MAAZ,CAAmBC,iBAAnB,OAA2CL,KAA3C,IAAoDL,gBAAgB,CAACO,CAAC,GAAG,CAAL,CAAhB,CAAwBE,MAAxB,CAA+BC,iBAA/B,MAAsDL,KAA9G,EAAqH;AACtHS,cAAAA,eAAe,GAAG,IAAlB;AAEH;AACJ,SAlByD,CAmB1D;;;AAEAP,QAAAA,CAAC,GAAG,EAAJ;AAEH;AACJ;AAEJ,GAhCD;AAkCAN,EAAAA,mBAAmB,GAAGc,UAAU,CAACb,YAAD,CAAhC;AAEAc,EAAAA,iBAAiB,GAAGhB,gBAApB;;AAEA,MAAIgB,iBAAiB,CAACR,MAAlB,GAA2B,CAA/B,EAAkC;AAE9BM,IAAAA,eAAe,GAAG,IAAlB;AAEA,UAAMG,YAAY,GAAG,IAAID,iBAAiB,CAACR,MAA3C;;AAEA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,YAApB,EAAkCV,CAAC,EAAnC,EAAuC;AAEnC;AACAS,MAAAA,iBAAiB,CAACV,IAAlB,CAAuBY,MAAM,CAACP,MAAP,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CAAvB,EAHmC,CAKnC;AAEA;;AACAK,MAAAA,iBAAiB,CAACG,IAAlB,CAAuB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACnC,YAAID,CAAC,CAACE,CAAF,GAAMD,CAAC,CAACC,CAAZ,EAAe;AACX,iBAAO,CAAP;AACH,SAFD,MAGK,IAAIF,CAAC,CAACE,CAAF,GAAMD,CAAC,CAACC,CAAZ,EAAe;AAChB,iBAAO,CAAC,CAAR;AACH,SAFI,MAGA;AACD,iBAAO,CAAP;AACH;AACJ,OAVD;AAYAC,MAAAA,OAAO,CAACC,GAAR,CAAYV,eAAZ;AAEH;AAEJ;AAIJ,C,CAED;;;AAEA,SAASC,UAAT,CAAoBU,GAApB,EAAyB;AAGrB,MAAIC,IAAJ;;AAEA,OAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkB,GAAG,CAACjB,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AAEjCmB,IAAAA,IAAI,GAAG,CAAED,GAAG,CAAClB,CAAD,CAAZ;AAEH;;AAED,SAAOmB,IAAP;AAEH","sourcesContent":["//Función que elimina las cartas usadas\n\nfunction descartarCartasUsadas(mapaCompuesto, elementosEnBanca) {\n\n    var totalDeCartasUsadas;    //VAriable que almacena la suma de valores\n\n    var arrayValores = [];   //Matriz que almacena todos los valores\n\n    //El valor es el numero de repeticiones y la clave el elemento\n    mapaCompuesto.forEach(function (valor, clave) {\n\n        arrayValores.push(valor);\n\n        for (var i = 0; i < elementosEnBanca.length; i++) {\n\n            if (clave === elementosEnBanca[i].nombre.toLocaleLowerCase()) {\n\n                elementosEnBanca.splice(i, valor);\n\n                //Comprovar si carta robado no esta definida\n\n                if (cartaRobada != undefined) {\n\n                    if (elementosEnBanca[i + 1] === undefined) {\n                        cartaRobarUsada = true;\n\n                    }\n\n                    //Si el nombre de la carta robada es igual a la clave   \n                    else if (cartaRobada.nombre.toLocaleLowerCase() === clave && elementosEnBanca[i + 1].nombre.toLocaleLowerCase() != clave) {\n                        cartaRobarUsada = true;\n\n                    }\n                }\n                //Evitar la repetición del bucle\n\n                i = 10;\n\n            }\n        }\n\n    });\n\n    totalDeCartasUsadas = sumarArray(arrayValores);\n\n    cartasDisponibles = elementosEnBanca;\n\n    if (cartasDisponibles.length < 8) {\n\n        cartaRobarUsada = true\n\n        const cartasARobar = 8 - cartasDisponibles.length;\n\n        for (var i = 0; i < cartasARobar; i++) {\n\n            //Añadir la primera carta a la banca\n            cartasDisponibles.push(baraja.splice(2, 1)[0]);\n\n            //Eliminar la segunda carta de la baraja\n\n            //Prdena\n            cartasDisponibles.sort(function (a, b) {\n                if (a.z > b.z) {\n                    return 1;\n                }\n                else if (a.z < b.z) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n            });\n\n            console.log(cartaRobarUsada);\n\n        }\n\n    }\n\n\n\n}\n\n//Funcion sumar un array\n\nfunction sumarArray(arr) {\n\n\n    var suma;\n\n    for (var i = 0; i < arr.length; i++) {\n\n        suma = + arr[i]\n\n    }\n\n    return suma;\n\n}"]},"metadata":{},"sourceType":"module"}