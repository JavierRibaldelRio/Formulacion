{"ast":null,"code":"//Esta función se ocupa de guardar un record\nimport records from \"./records.json\"; //importa el archivo json\n//Se ocupa de poder crear el json\n\nconst fs = require('fs'); // Almaciena el número de datos que ha de guardar\n\n\nconst numeroDePuntuacionesAGuardar = 10; //La función devuleve si ha podido entrar en la tabla de clasificación\n\n/**\n * 0: No ha entrado\n * \n * 1: El nombre esta repetido\n * \n * 2: El nombre es muy corto minimo 4 caracteres o muy largo máximo 15 cáracteres\n * \n * 3: El texto no es valido: no puede contener ni espacios ni simbolos\n * \n * 4: Se ha ingresado correctamente\n *\n */\n\nfunction guardarPuntuacion(nombreUsuario, puntos, numeroDeCompuestos) {\n  var recordsActuales = [...records]; //Almacena lo que va devolver la función\n\n  var devolucion = 0; //ordena la matriz de objetos del json\n\n  recordsActuales.sort(function (a, b) {\n    if (a.puntos > b.puntos) {\n      return -1;\n    } else if (a.puntos === b.puntos) {\n      return 0;\n    } else {\n      return +1;\n    }\n  }); //Comprueba si ha entrado en el ranking\n\n  if (recordsActuales[recordsActuales.length - 1].puntos < puntos) {\n    let objetoNuevo = {\n      nombre: nombreUsuario.trim(),\n      puntos: puntos,\n      numeroDeCompuestos: numeroDeCompuestos\n    };\n\n    if (numeroDePuntuacionesAGuardar <= recordsActuales.length) {\n      //Elimina la última del array\n      recordsActuales.pop(); //comprobar que tenga la longitud minima y máxima\n\n      if (nombreUsuario.length < 4 || nombreUsuario.length > 15) {\n        devolucion = 2;\n      } else {\n        //Comprueba que solo tiene números y letras\n        if (/^[0-9A-Za-z]*$/.test(nombreUsuario) === true) {\n          //Compruba que no hay nadie con el mismo nombre en el ranking\n          if (recordsActuales.find(function (puntuacion) {\n            return puntuacion.nombre.toLocaleLowerCase() === nombreUsuario.toLocaleLowerCase().trim();\n          })) {\n            devolucion = 1;\n          } else {\n            let jsonRecordsActuales; //Lo añade a los records\n\n            recordsActuales.push(objetoNuevo); //el valor que va a devolver\n\n            devolucion = 4; //Guardar cambios en el json\n\n            jsonRecordsActuales = JSON.stringify(recordsActuales);\n            fs.writeFile('./newCustomer.json', jsonString, err => {\n              if (err) {\n                console.log('Error writing file', err);\n              } else {\n                console.log('Escrito correctamente');\n              }\n            });\n          }\n        } else {\n          devolucion = 3;\n        }\n      }\n    }\n\n    console.log(devolucion);\n    return devolucion;\n  }\n\n  return devolucion;\n}\n\nexport default guardarPuntuacion;","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/src/guardarRecords.js"],"names":["records","fs","require","numeroDePuntuacionesAGuardar","guardarPuntuacion","nombreUsuario","puntos","numeroDeCompuestos","recordsActuales","devolucion","sort","a","b","length","objetoNuevo","nombre","trim","pop","test","find","puntuacion","toLocaleLowerCase","jsonRecordsActuales","push","JSON","stringify","writeFile","jsonString","err","console","log"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,gBAApB,C,CACA;AACA;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CAEA;;;AAEA,MAAMC,4BAA4B,GAAG,EAArC,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,MAA1C,EAAkDC,kBAAlD,EAAsE;AAElE,MAAIC,eAAe,GAAG,CAAC,GAAGR,OAAJ,CAAtB,CAFkE,CAIlE;;AACA,MAAIS,UAAU,GAAG,CAAjB,CALkE,CAOlE;;AAEAD,EAAAA,eAAe,CAACE,IAAhB,CAAqB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACjC,QAAID,CAAC,CAACL,MAAF,GAAWM,CAAC,CAACN,MAAjB,EAAyB;AAErB,aAAO,CAAC,CAAR;AACH,KAHD,MAGO,IAAIK,CAAC,CAACL,MAAF,KAAaM,CAAC,CAACN,MAAnB,EAA2B;AAC9B,aAAO,CAAP;AACH,KAFM,MAEA;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GATD,EATkE,CAoBlE;;AAEA,MAAIE,eAAe,CAACA,eAAe,CAACK,MAAhB,GAAyB,CAA1B,CAAf,CAA4CP,MAA5C,GAAqDA,MAAzD,EAAiE;AAC7D,QAAIQ,WAAW,GAAG;AACdC,MAAAA,MAAM,EAAEV,aAAa,CAACW,IAAd,EADM;AAGdV,MAAAA,MAAM,EAAEA,MAHM;AAKdC,MAAAA,kBAAkB,EAAEA;AALN,KAAlB;;AAQA,QAAIJ,4BAA4B,IAAIK,eAAe,CAACK,MAApD,EAA4D;AACxD;AACAL,MAAAA,eAAe,CAACS,GAAhB,GAFwD,CAKxD;;AACA,UAAIZ,aAAa,CAACQ,MAAd,GAAuB,CAAvB,IAA4BR,aAAa,CAACQ,MAAd,GAAuB,EAAvD,EAA2D;AACvDJ,QAAAA,UAAU,GAAG,CAAb;AACH,OAFD,MAGK;AAED;AAEA,YAAI,iBAAiBS,IAAjB,CAAsBb,aAAtB,MAAyC,IAA7C,EAAmD;AAE/C;AACA,cAAIG,eAAe,CAACW,IAAhB,CAAqB,UAAUC,UAAV,EAAsB;AAE3C,mBAAOA,UAAU,CAACL,MAAX,CAAkBM,iBAAlB,OAA0ChB,aAAa,CAACgB,iBAAd,GAAkCL,IAAlC,EAAjD;AAEH,WAJG,CAAJ,EAII;AAEAP,YAAAA,UAAU,GAAG,CAAb;AACH,WAPD,MAQK;AAED,gBAAIa,mBAAJ,CAFC,CAID;;AACAd,YAAAA,eAAe,CAACe,IAAhB,CAAqBT,WAArB,EALC,CAOD;;AAEAL,YAAAA,UAAU,GAAG,CAAb,CATC,CAWD;;AAEAa,YAAAA,mBAAmB,GAAGE,IAAI,CAACC,SAAL,CAAejB,eAAf,CAAtB;AAEAP,YAAAA,EAAE,CAACyB,SAAH,CAAa,oBAAb,EAAmCC,UAAnC,EAA+CC,GAAG,IAAI;AAClD,kBAAIA,GAAJ,EAAS;AACLC,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,GAAlC;AACH,eAFD,MAEO;AACHC,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACH;AACJ,aAND;AAQH;AACJ,SAnCD,MAqCK;AACDrB,UAAAA,UAAU,GAAG,CAAb;AACH;AACJ;AACJ;;AAEDoB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,UAAZ;AAEA,WAAOA,UAAP;AAEH;;AAED,SAAOA,UAAP;AACH;;AAED,eAAeL,iBAAf","sourcesContent":["//Esta función se ocupa de guardar un record\nimport records from \"./records.json\";\n//importa el archivo json\n//Se ocupa de poder crear el json\n\nconst fs = require('fs');\n\n// Almaciena el número de datos que ha de guardar\n\nconst numeroDePuntuacionesAGuardar = 10;\n\n//La función devuleve si ha podido entrar en la tabla de clasificación\n/**\n * 0: No ha entrado\n * \n * 1: El nombre esta repetido\n * \n * 2: El nombre es muy corto minimo 4 caracteres o muy largo máximo 15 cáracteres\n * \n * 3: El texto no es valido: no puede contener ni espacios ni simbolos\n * \n * 4: Se ha ingresado correctamente\n *\n */\n\nfunction guardarPuntuacion(nombreUsuario, puntos, numeroDeCompuestos) {\n\n    var recordsActuales = [...records];\n\n    //Almacena lo que va devolver la función\n    var devolucion = 0;\n\n    //ordena la matriz de objetos del json\n\n    recordsActuales.sort(function (a, b) {\n        if (a.puntos > b.puntos) {\n\n            return -1;\n        } else if (a.puntos === b.puntos) {\n            return 0;\n        } else {\n            return +1;\n        }\n    })\n\n    //Comprueba si ha entrado en el ranking\n\n    if (recordsActuales[recordsActuales.length - 1].puntos < puntos) {\n        let objetoNuevo = {\n            nombre: nombreUsuario.trim(),\n\n            puntos: puntos,\n\n            numeroDeCompuestos: numeroDeCompuestos\n        }\n\n        if (numeroDePuntuacionesAGuardar <= recordsActuales.length) {\n            //Elimina la última del array\n            recordsActuales.pop();\n\n\n            //comprobar que tenga la longitud minima y máxima\n            if (nombreUsuario.length < 4 || nombreUsuario.length > 15) {\n                devolucion = 2\n            }\n            else {\n\n                //Comprueba que solo tiene números y letras\n\n                if (/^[0-9A-Za-z]*$/.test(nombreUsuario) === true) {\n\n                    //Compruba que no hay nadie con el mismo nombre en el ranking\n                    if (recordsActuales.find(function (puntuacion) {\n\n                        return puntuacion.nombre.toLocaleLowerCase() === nombreUsuario.toLocaleLowerCase().trim();\n\n                    })) {\n\n                        devolucion = 1;\n                    }\n                    else {\n\n                        let jsonRecordsActuales;\n\n                        //Lo añade a los records\n                        recordsActuales.push(objetoNuevo);\n\n                        //el valor que va a devolver\n\n                        devolucion = 4;\n\n                        //Guardar cambios en el json\n\n                        jsonRecordsActuales = JSON.stringify(recordsActuales);\n\n                        fs.writeFile('./newCustomer.json', jsonString, err => {\n                            if (err) {\n                                console.log('Error writing file', err)\n                            } else {\n                                console.log('Escrito correctamente')\n                            }\n                        })\n\n                    }\n                }\n\n                else {\n                    devolucion = 3;\n                }\n            }\n        }\n\n        console.log(devolucion);\n\n        return devolucion;\n\n    }\n\n    return devolucion;\n}\n\nexport default guardarPuntuacion;\n"]},"metadata":{},"sourceType":"module"}