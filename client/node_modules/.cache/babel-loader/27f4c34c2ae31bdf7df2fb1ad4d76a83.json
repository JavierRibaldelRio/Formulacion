{"ast":null,"code":"//Esta función se ocupa de guardar un record\nimport records from \"./records.json\"; //importa el archivo json\n//Se ocupa de poder crear el json\n\nconst fs = require('fs'); // Almaciena el número de datos que ha de guardar\n\n\nconst numeroDePuntuacionesAGuardar = 10; //La función devuleve si ha podido entrar en la tabla de clasificación\n\n/**\n * 0: No ha entrado\n * \n * 1: El nombre esta repetido\n * \n * 2: El nombre es muy corto minimo 4 caracteres\n * \n * 3: El nombre es muy largo máximo 15 cáracteres\n * \n * 4: El texto no es valido: no puede contener ni espacios ni simbolos\n * \n * 5: Se ha ingresado correctamente\n *\n */\n\nfunction guardarPuntuacion(nombreUsuario, puntos, numeroDeCompuestos) {\n  var recorsActuales = [...records]; //ordena la matriz de objetos del json\n\n  recorsActuales.sort(function (a, b) {\n    if (a.puntos > b.puntos) {\n      return -1;\n    } else if (a.puntos === b.puntos) {\n      return 0;\n    } else {\n      return +1;\n    }\n  }); //Comprueba si ha entrado en el ranking\n\n  if (recorsActuales[recorsActuales.length - 1].puntos < puntos) {\n    let objetoNuevo = {\n      nombre: nombreUsuario.trim(),\n      puntos: puntos,\n      numeroDeCompuestos: numeroDeCompuestos\n    };\n\n    if (numeroDePuntuacionesAGuardar <= recorsActuales.length) {\n      //Elimina la última del array\n      recorsActuales.pop(); //Comprovar que no alla nadie con el mismo nombre\n\n      if (recorsActuales.find(function (puntuacion) {\n        return puntuacion.nombre.toLocaleLowerCase() === nombreUsuario.toLocaleLowerCase().trim();\n      })) {\n        console.log(recorsActuales);\n        return 1;\n      }\n    } //Añade al array el nuvo elemento\n\n\n    recorsActuales.push(objetoNuevo);\n    console.log(recorsActuales);\n    return true;\n  }\n\n  return false;\n  console.log(recorsActuales);\n}\n\nexport default guardarPuntuacion;","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/src/guardarRecords.js"],"names":["records","fs","require","numeroDePuntuacionesAGuardar","guardarPuntuacion","nombreUsuario","puntos","numeroDeCompuestos","recorsActuales","sort","a","b","length","objetoNuevo","nombre","trim","pop","find","puntuacion","toLocaleLowerCase","console","log","push"],"mappings":"AAAA;AACA,OAAOA,OAAP,MAAoB,gBAApB,C,CACA;AACA;;AAEA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB,C,CAEA;;;AAEA,MAAMC,4BAA4B,GAAG,EAArC,C,CAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,MAA1C,EAAkDC,kBAAlD,EAAsE;AAElE,MAAIC,cAAc,GAAG,CAAC,GAAGR,OAAJ,CAArB,CAFkE,CAIlE;;AAEAQ,EAAAA,cAAc,CAACC,IAAf,CAAoB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChC,QAAID,CAAC,CAACJ,MAAF,GAAWK,CAAC,CAACL,MAAjB,EAAyB;AAErB,aAAO,CAAC,CAAR;AACH,KAHD,MAGO,IAAII,CAAC,CAACJ,MAAF,KAAaK,CAAC,CAACL,MAAnB,EAA2B;AAC9B,aAAO,CAAP;AACH,KAFM,MAEA;AACH,aAAO,CAAC,CAAR;AACH;AACJ,GATD,EANkE,CAiBlE;;AAEA,MAAIE,cAAc,CAACA,cAAc,CAACI,MAAf,GAAwB,CAAzB,CAAd,CAA0CN,MAA1C,GAAmDA,MAAvD,EAA+D;AAC3D,QAAIO,WAAW,GAAG;AACdC,MAAAA,MAAM,EAAET,aAAa,CAACU,IAAd,EADM;AAGdT,MAAAA,MAAM,EAAEA,MAHM;AAKdC,MAAAA,kBAAkB,EAAEA;AALN,KAAlB;;AAQA,QAAIJ,4BAA4B,IAAIK,cAAc,CAACI,MAAnD,EAA2D;AACvD;AACAJ,MAAAA,cAAc,CAACQ,GAAf,GAFuD,CAKvD;;AAEA,UAAIR,cAAc,CAACS,IAAf,CAAoB,UAAUC,UAAV,EAAsB;AAE1C,eAAOA,UAAU,CAACJ,MAAX,CAAkBK,iBAAlB,OAA0Cd,aAAa,CAACc,iBAAd,GAAkCJ,IAAlC,EAAjD;AAEH,OAJG,CAAJ,EAII;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ;AAEA,eAAO,CAAP;AACH;AAEJ,KA1B0D,CA4B3D;;;AAEAA,IAAAA,cAAc,CAACc,IAAf,CAAoBT,WAApB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ;AAGA,WAAO,IAAP;AAEH;;AAED,SAAO,KAAP;AAIAY,EAAAA,OAAO,CAACC,GAAR,CAAYb,cAAZ;AAEH;;AAID,eAAeJ,iBAAf","sourcesContent":["//Esta función se ocupa de guardar un record\nimport records from \"./records.json\";\n//importa el archivo json\n//Se ocupa de poder crear el json\n\nconst fs = require('fs');\n\n// Almaciena el número de datos que ha de guardar\n\nconst numeroDePuntuacionesAGuardar = 10;\n\n//La función devuleve si ha podido entrar en la tabla de clasificación\n/**\n * 0: No ha entrado\n * \n * 1: El nombre esta repetido\n * \n * 2: El nombre es muy corto minimo 4 caracteres\n * \n * 3: El nombre es muy largo máximo 15 cáracteres\n * \n * 4: El texto no es valido: no puede contener ni espacios ni simbolos\n * \n * 5: Se ha ingresado correctamente\n *\n */\n\nfunction guardarPuntuacion(nombreUsuario, puntos, numeroDeCompuestos) {\n\n    var recorsActuales = [...records];\n\n    //ordena la matriz de objetos del json\n\n    recorsActuales.sort(function (a, b) {\n        if (a.puntos > b.puntos) {\n\n            return -1;\n        } else if (a.puntos === b.puntos) {\n            return 0;\n        } else {\n            return +1;\n        }\n    })\n\n    //Comprueba si ha entrado en el ranking\n\n    if (recorsActuales[recorsActuales.length - 1].puntos < puntos) {\n        let objetoNuevo = {\n            nombre: nombreUsuario.trim(),\n\n            puntos: puntos,\n\n            numeroDeCompuestos: numeroDeCompuestos\n        }\n\n        if (numeroDePuntuacionesAGuardar <= recorsActuales.length) {\n            //Elimina la última del array\n            recorsActuales.pop();\n\n\n            //Comprovar que no alla nadie con el mismo nombre\n\n            if (recorsActuales.find(function (puntuacion) {\n\n                return puntuacion.nombre.toLocaleLowerCase() === nombreUsuario.toLocaleLowerCase().trim();\n\n            })) {\n                console.log(recorsActuales);\n\n                return 1;\n            }\n\n        }\n\n        //Añade al array el nuvo elemento\n\n        recorsActuales.push(objetoNuevo);\n\n        console.log(recorsActuales);\n\n\n        return true;\n\n    }\n\n    return false;\n\n\n\n    console.log(recorsActuales)\n\n}\n\n\n\nexport default guardarPuntuacion;\n\n"]},"metadata":{},"sourceType":"module"}