{"ast":null,"code":"import{prefijos,oxido,numeroDePrefijos,hidruro}from'./palabrasClaves';import{encontrarPrefijo,comprobarSiPuedeGenerarCompuestos}from'./funcionCompuesto';import nombresEquivalentes from'./EquivalenciasNombres';import crearMapaCompuesto from\"./crearMapaCompuesto\";import descartarCartasUsadas from'./eliminarCompuestos';function comprobarCompuestoBinario(compuestoBinarioABuscar,compuesto,mapElementos,elementos){//Comprobar si el compuesto tiene las suficientes letras para valorarse\nif(compuesto.trim().split(\" \").length!==3){return false;}var primerPrefijo=prefijos[1];//Como el monoóxido lleva solo f\nif(compuestoBinarioABuscar===oxido){primerPrefijo=\"mon\";}//Si lo es comprueba cuantas meleculas tiene de hidruro\nif(compuesto.startsWith(compuestoBinarioABuscar)||compuesto.startsWith(primerPrefijo+compuestoBinarioABuscar)){// console.log(\"mono\");\nvar resultado=ejecucionBinario(1);//Lo que se ha de ejecutar en caso de que sea un hidrudo\n//Si es falso devuelves resultado\nif(false===resultado){return false;}//Si no es falso y es verdadero devuelves true\nelse if(typeof resultado===\"number\"){return resultado;}}else{//Se ejecuta una vez por cada prefijo\nfor(var i=2;i<numeroDePrefijos+1;i++){//Comprueba con que prefijos coinciden con el prefijo\nif(compuesto.startsWith(prefijos[i]+compuestoBinarioABuscar)){var _resultado=ejecucionBinario(i);//Lo que se ha de ejecutar en caso de que sea un hidrudo\n//Si es falso devuelves resultado\nif(false===_resultado){return false;}//Si no es falso y es verdadero devuelves true\nelse if(typeof _resultado===\"number\"){return _resultado;}i=numeroDePrefijos;//Para que no lo comprueve más el for, de esa forma se deja de comprobar si el prefijo es el mismi\n}}}//Lo que se tiene que ejecutar si es un hidruro\nfunction ejecucionBinario(numero){var sal=averiguarCompuestoBinario(compuesto,mapElementos,numero,compuestoBinarioABuscar,elementos);// console.log(sal)\nif(typeof sal===\"number\"){return sal;}else{return false;}}}function averiguarCompuestoBinario(texto,mapa,prefijoBinario1,primerCompuesto,elementos){var devolver=false;//Almacena lo que se va ha devolver\ntexto=texto.trim();//Para quitar leos espacios a pricipio de palabra\nvar textoSeparado=texto.split(\" \");//Para separar las palabras en meterlas en un array invididual\n// console.log(textoSeparado);\nvar elemento=textoSeparado[2];//coger el tercer trozo de el array de palabras torceadas\nvar nombreSegundoElemento;var numeroPrefijoSegundoElemento;//Se ejecuta por cada casilla del mapa\nmapa.forEach(function(valor,key){//Almacena el nombre del segundo compuesto\nvar nombre=key.nombre/*Coger la propiedad*/.toLocaleLowerCase();//Para pasar a minusculas\n//Si acaba con nombre\nif(elemento.endsWith(nombre)){//Prefijo del 2º Elemnto\nvar prefijoMultipicador=elemento.split(nombre)[0];//Sacar el prefijo\n//Si no hay particula quiere decir que es 1(mono)\nif(prefijoMultipicador===\"\"){numeroPrefijoSegundoElemento=1;//Ya que si no hay nada es mono\n}//Para encontrar el prefijo               \nelse{numeroPrefijoSegundoElemento=encontrarPrefijo(prefijoMultipicador);}// console.log(numeroPrefijoSegundoElemento);\n//Si número de prefijo es -1 [ERROR] o es de un grupo de los anfigenos o Halogenos\nif(numeroPrefijoSegundoElemento===-1){return false;}//Para asegurar que no es un hidruro no metalico\nif(key.grupo>15&&hidruro===primerCompuesto){return false;}//Devuelve -2\n//Asigna a la variable del mapa\nnombreSegundoElemento=nombre;//Dice si es posible combinar los introducidios, sumar y comprobar valencias\ndevolver=comprobarSiPuedeGenerarCompuestos(nombresEquivalentes(primerCompuesto),prefijoBinario1,nombre,numeroPrefijoSegundoElemento,mapa);}});//Si es un numero\nif(typeof devolver===\"number\"){//Creamos la matriz del compuesto\nvar elementosUsados=[nombresEquivalentes(primerCompuesto),nombreSegundoElemento.toLocaleLowerCase()];var repeticionesElementosUsados=[prefijoBinario1,numeroPrefijoSegundoElemento];var mapaCompuesto=crearMapaCompuesto(elementosUsados,repeticionesElementosUsados);descartarCartasUsadas(mapaCompuesto,elementos);}return devolver;}export default comprobarCompuestoBinario;","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/client/src/compuestoBinario.js"],"names":["prefijos","oxido","numeroDePrefijos","hidruro","encontrarPrefijo","comprobarSiPuedeGenerarCompuestos","nombresEquivalentes","crearMapaCompuesto","descartarCartasUsadas","comprobarCompuestoBinario","compuestoBinarioABuscar","compuesto","mapElementos","elementos","trim","split","length","primerPrefijo","startsWith","resultado","ejecucionBinario","i","numero","sal","averiguarCompuestoBinario","texto","mapa","prefijoBinario1","primerCompuesto","devolver","textoSeparado","elemento","nombreSegundoElemento","numeroPrefijoSegundoElemento","forEach","valor","key","nombre","toLocaleLowerCase","endsWith","prefijoMultipicador","grupo","elementosUsados","repeticionesElementosUsados","mapaCompuesto"],"mappings":"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","sourcesContent":["import { prefijos, oxido, numeroDePrefijos, hidruro } from './palabrasClaves';\nimport { encontrarPrefijo, comprobarSiPuedeGenerarCompuestos } from './funcionCompuesto'\nimport nombresEquivalentes from './EquivalenciasNombres';\nimport crearMapaCompuesto from \"./crearMapaCompuesto\";\nimport descartarCartasUsadas from './eliminarCompuestos';\n\n\nfunction comprobarCompuestoBinario(compuestoBinarioABuscar, compuesto, mapElementos, elementos) {\n\n    //Comprobar si el compuesto tiene las suficientes letras para valorarse\n\n    if (compuesto.trim().split(\" \").length !== 3) {\n\n        return false;\n\n    }\n\n    var primerPrefijo = prefijos[1];\n    //Como el monoóxido lleva solo f\n    if (compuestoBinarioABuscar === oxido) {\n        primerPrefijo = \"mon\"\n    }\n\n    //Si lo es comprueba cuantas meleculas tiene de hidruro\n    if (compuesto.startsWith(compuestoBinarioABuscar) || compuesto.startsWith(primerPrefijo + compuestoBinarioABuscar)) {\n\n        // console.log(\"mono\");\n\n        const resultado = ejecucionBinario(1);  //Lo que se ha de ejecutar en caso de que sea un hidrudo\n\n        //Si es falso devuelves resultado\n        if (false === resultado) {\n\n            return false;\n\n        }\n\n        //Si no es falso y es verdadero devuelves true\n        else if (typeof resultado === \"number\") {\n\n            return resultado;\n\n        }\n\n    } else {\n\n        //Se ejecuta una vez por cada prefijo\n        for (var i = 2; i < (numeroDePrefijos + 1); i++) {\n\n            //Comprueba con que prefijos coinciden con el prefijo\n            if (compuesto.startsWith(prefijos[i] + compuestoBinarioABuscar)) {\n\n                const resultado = ejecucionBinario(i);  //Lo que se ha de ejecutar en caso de que sea un hidrudo\n\n                //Si es falso devuelves resultado\n                if (false === resultado) {\n\n                    return false;\n\n                }\n\n                //Si no es falso y es verdadero devuelves true\n                else if (typeof resultado === \"number\") {\n\n                    return resultado;\n\n                }\n\n                i = numeroDePrefijos; //Para que no lo comprueve más el for, de esa forma se deja de comprobar si el prefijo es el mismi\n            }\n\n        }\n\n    }\n\n\n    //Lo que se tiene que ejecutar si es un hidruro\n    function ejecucionBinario(numero) {\n\n        var sal = averiguarCompuestoBinario(compuesto, mapElementos, numero, compuestoBinarioABuscar, elementos);\n\n        // console.log(sal)\n\n        if (typeof sal === \"number\") {\n\n\n            return sal;\n\n\n        } else {\n\n            return false;\n\n        }\n\n    }\n}\n\nfunction averiguarCompuestoBinario(texto, mapa, prefijoBinario1, primerCompuesto, elementos) {\n\n    var devolver = false;   //Almacena lo que se va ha devolver\n\n    texto = texto.trim()    //Para quitar leos espacios a pricipio de palabra\n\n    var textoSeparado = texto.split(\" \");   //Para separar las palabras en meterlas en un array invididual\n\n    // console.log(textoSeparado);\n\n    var elemento = textoSeparado[2];    //coger el tercer trozo de el array de palabras torceadas\n\n    var nombreSegundoElemento;\n\n    var numeroPrefijoSegundoElemento;\n\n    //Se ejecuta por cada casilla del mapa\n    mapa.forEach(function (valor, key) {\n\n        //Almacena el nombre del segundo compuesto\n        const nombre = key.nombre/*Coger la propiedad*/.toLocaleLowerCase();    //Para pasar a minusculas\n\n        //Si acaba con nombre\n        if (elemento.endsWith(nombre)) {\n\n            //Prefijo del 2º Elemnto\n\n            var prefijoMultipicador = elemento.split(nombre)[0]; //Sacar el prefijo\n\n            //Si no hay particula quiere decir que es 1(mono)\n            if (prefijoMultipicador === \"\") {\n\n                numeroPrefijoSegundoElemento = 1;      //Ya que si no hay nada es mono\n\n            }\n\n            //Para encontrar el prefijo               \n            else {\n\n                numeroPrefijoSegundoElemento = encontrarPrefijo(prefijoMultipicador);\n\n            }\n\n            // console.log(numeroPrefijoSegundoElemento);\n\n            //Si número de prefijo es -1 [ERROR] o es de un grupo de los anfigenos o Halogenos\n            if (numeroPrefijoSegundoElemento === -1) {\n\n                return false;\n\n            }\n\n            //Para asegurar que no es un hidruro no metalico\n            if (key.grupo > 15 && hidruro === primerCompuesto) {\n                return false;\n            }\n            //Devuelve -2\n\n            //Asigna a la variable del mapa\n\n            nombreSegundoElemento = nombre;\n\n\n\n            //Dice si es posible combinar los introducidios, sumar y comprobar valencias\n            devolver = comprobarSiPuedeGenerarCompuestos(nombresEquivalentes(primerCompuesto), prefijoBinario1, nombre, numeroPrefijoSegundoElemento, mapa);\n\n        }\n\n    });\n\n    //Si es un numero\n    if (typeof devolver === \"number\") {\n\n        //Creamos la matriz del compuesto\n\n        const elementosUsados = [nombresEquivalentes(primerCompuesto), nombreSegundoElemento.toLocaleLowerCase()];\n\n        const repeticionesElementosUsados = [prefijoBinario1, numeroPrefijoSegundoElemento];\n\n        const mapaCompuesto = crearMapaCompuesto(elementosUsados, repeticionesElementosUsados);\n\n        descartarCartasUsadas(mapaCompuesto, elementos);\n    }\n\n    return devolver;\n\n}\n\nexport default comprobarCompuestoBinario;\n"]},"metadata":{},"sourceType":"module"}