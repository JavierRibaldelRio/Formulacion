{"ast":null,"code":"//Función que elimina las cartas usadas\nfunction descartarCartasUsadas(mapaCompuesto,elementosEnBanca){var arrayValores=[];//Matriz que almacena todos los valores\n//El valor es el numero de repeticiones y la clave el elemento\nmapaCompuesto.forEach(function(valor,clave){arrayValores.push(valor);for(var i=0;i<elementosEnBanca.length;i++){if(clave===elementosEnBanca[i].nombre.toLocaleLowerCase()){elementosEnBanca.splice(i,valor);//Comprovar si carta robado no esta definida\nif(window.$cartaRobada!==undefined){if(elementosEnBanca[i+1]===undefined){window.$cartaRobarUsada=true;}//Si el nombre de la carta robada es igual a la clave   \nelse if(window.$cartaRobada.nombre.toLocaleLowerCase()===clave&&elementosEnBanca[i+1].nombre.toLocaleLowerCase()!==clave){window.$cartaRobarUsada=true;}}//Evitar la repetición del bucle\ni=10;}}});window.$cartasDisponibles=elementosEnBanca;if(window.$cartasDisponibles.length<8){window.$cartaRobarUsada=true;var cartasARobar=8-window.$cartasDisponibles.length;for(var i=0;i<cartasARobar;i++){//Añadir la primera carta a la banca\nwindow.$cartasDisponibles.push(window.$baraja.splice(2,1)[0]);//Eliminar la segunda carta de la baraja\n//Prdena\nwindow.$cartasDisponibles.sort(function(a,b){if(a.z>b.z){return 1;}else if(a.z<b.z){return-1;}else{return 0;}});console.log(window.$cartaRobarUsada);}}}export default descartarCartasUsadas;","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/client/src/eliminarCompuestos.js"],"names":["descartarCartasUsadas","mapaCompuesto","elementosEnBanca","arrayValores","forEach","valor","clave","push","i","length","nombre","toLocaleLowerCase","splice","window","$cartaRobada","undefined","$cartaRobarUsada","$cartasDisponibles","cartasARobar","$baraja","sort","a","b","z","console","log"],"mappings":"AACA;AAEA,QAASA,CAAAA,qBAAT,CAA+BC,aAA/B,CAA8CC,gBAA9C,CAAgE,CAE5D,GAAIC,CAAAA,YAAY,CAAG,EAAnB,CAAyB;AAEzB;AACAF,aAAa,CAACG,OAAd,CAAsB,SAAUC,KAAV,CAAiBC,KAAjB,CAAwB,CAE1CH,YAAY,CAACI,IAAb,CAAkBF,KAAlB,EAEA,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGN,gBAAgB,CAACO,MAArC,CAA6CD,CAAC,EAA9C,CAAkD,CAE9C,GAAIF,KAAK,GAAKJ,gBAAgB,CAACM,CAAD,CAAhB,CAAoBE,MAApB,CAA2BC,iBAA3B,EAAd,CAA8D,CAE1DT,gBAAgB,CAACU,MAAjB,CAAwBJ,CAAxB,CAA2BH,KAA3B,EAEA;AAEA,GAAIQ,MAAM,CAACC,YAAP,GAAwBC,SAA5B,CAAuC,CAEnC,GAAIb,gBAAgB,CAACM,CAAC,CAAG,CAAL,CAAhB,GAA4BO,SAAhC,CAA2C,CACvCF,MAAM,CAACG,gBAAP,CAA0B,IAA1B,CAEH,CAED;AALA,IAMK,IAAIH,MAAM,CAACC,YAAP,CAAoBJ,MAApB,CAA2BC,iBAA3B,KAAmDL,KAAnD,EAA4DJ,gBAAgB,CAACM,CAAC,CAAG,CAAL,CAAhB,CAAwBE,MAAxB,CAA+BC,iBAA/B,KAAuDL,KAAvH,CAA8H,CAC/HO,MAAM,CAACG,gBAAP,CAA0B,IAA1B,CAEH,CACJ,CACD;AAEAR,CAAC,CAAG,EAAJ,CAEH,CACJ,CAEJ,CAhCD,EAkCAK,MAAM,CAACI,kBAAP,CAA4Bf,gBAA5B,CAEA,GAAIW,MAAM,CAACI,kBAAP,CAA0BR,MAA1B,CAAmC,CAAvC,CAA0C,CAEtCI,MAAM,CAACG,gBAAP,CAA0B,IAA1B,CAEA,GAAME,CAAAA,YAAY,CAAG,EAAIL,MAAM,CAACI,kBAAP,CAA0BR,MAAnD,CAEA,IAAK,GAAID,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGU,YAApB,CAAkCV,CAAC,EAAnC,CAAuC,CAEnC;AACAK,MAAM,CAACI,kBAAP,CAA0BV,IAA1B,CAA+BM,MAAM,CAACM,OAAP,CAAeP,MAAf,CAAsB,CAAtB,CAAyB,CAAzB,EAA4B,CAA5B,CAA/B,EAEA;AAEA;AACAC,MAAM,CAACI,kBAAP,CAA0BG,IAA1B,CAA+B,SAAUC,CAAV,CAAaC,CAAb,CAAgB,CAC3C,GAAID,CAAC,CAACE,CAAF,CAAMD,CAAC,CAACC,CAAZ,CAAe,CACX,MAAO,EAAP,CACH,CAFD,IAGK,IAAIF,CAAC,CAACE,CAAF,CAAMD,CAAC,CAACC,CAAZ,CAAe,CAChB,MAAO,CAAC,CAAR,CACH,CAFI,IAGA,CACD,MAAO,EAAP,CACH,CACJ,CAVD,EAYAC,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACG,gBAAnB,EAEH,CAEJ,CAIJ,CAGD,cAAehB,CAAAA,qBAAf","sourcesContent":["\n//Función que elimina las cartas usadas\n\nfunction descartarCartasUsadas(mapaCompuesto, elementosEnBanca) {\n\n    var arrayValores = [];   //Matriz que almacena todos los valores\n\n    //El valor es el numero de repeticiones y la clave el elemento\n    mapaCompuesto.forEach(function (valor, clave) {\n\n        arrayValores.push(valor);\n\n        for (var i = 0; i < elementosEnBanca.length; i++) {\n\n            if (clave === elementosEnBanca[i].nombre.toLocaleLowerCase()) {\n\n                elementosEnBanca.splice(i, valor);\n\n                //Comprovar si carta robado no esta definida\n\n                if (window.$cartaRobada !== undefined) {\n\n                    if (elementosEnBanca[i + 1] === undefined) {\n                        window.$cartaRobarUsada = true;\n\n                    }\n\n                    //Si el nombre de la carta robada es igual a la clave   \n                    else if (window.$cartaRobada.nombre.toLocaleLowerCase() === clave && elementosEnBanca[i + 1].nombre.toLocaleLowerCase() !== clave) {\n                        window.$cartaRobarUsada = true;\n\n                    }\n                }\n                //Evitar la repetición del bucle\n\n                i = 10;\n\n            }\n        }\n\n    });\n\n    window.$cartasDisponibles = elementosEnBanca;\n\n    if (window.$cartasDisponibles.length < 8) {\n\n        window.$cartaRobarUsada = true\n\n        const cartasARobar = 8 - window.$cartasDisponibles.length;\n\n        for (var i = 0; i < cartasARobar; i++) {\n\n            //Añadir la primera carta a la banca\n            window.$cartasDisponibles.push(window.$baraja.splice(2, 1)[0]);\n\n            //Eliminar la segunda carta de la baraja\n\n            //Prdena\n            window.$cartasDisponibles.sort(function (a, b) {\n                if (a.z > b.z) {\n                    return 1;\n                }\n                else if (a.z < b.z) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n            });\n\n            console.log(window.$cartaRobarUsada);\n\n        }\n\n    }\n\n\n\n}\n\n\nexport default descartarCartasUsadas;"]},"metadata":{},"sourceType":"module"}