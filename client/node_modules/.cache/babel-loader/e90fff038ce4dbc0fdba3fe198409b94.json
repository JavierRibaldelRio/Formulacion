{"ast":null,"code":"//Función que compruba las ecepciones\nfunction identificarCompuestosExcepcionales(compuesto, mapaElementos, elementos) {\n  //Comprueba si es formulable\n  var formulable = false;\n\n  switch (compuesto) {\n    case \"agua\":\n      //Le manda la formula de agua para comprobar que lo puede formular\n      formulable = comprobarCompuestoBinario(oxido, aguaSistematica, mapaElementos, elementos);\n      break;\n\n    case \"amoniaco\":\n      //Le manda la formula de agua para comprobar que lo puede formular\n      formulable = comprobarCompuestoBinario(hidruro, amoniacoSistematico, mapaElementos, elementos);\n      break;\n\n    case \"metano\":\n      formulable = comprobarCompuestoBinario(hidruro, metanoSistematico, mapaElementos, elementos);\n      break;\n\n    case \"ozono\":\n      mapaElementos.forEach(function (clave, valor) {\n        if (valor.nombre.toLowerCase() === \"oxígeno\" && clave >= 3) {\n          descartarCartasUsadas(crearMapaCompuesto(Array.from([valor.nombre.toLowerCase()]), Array.from([3])), elementos); //Calcula la puntuacion\n\n          formulable = calcularPuntuacion(crearMapaCompuestoPuntuacion(Array.from([valor]), Array.from([3])));\n        }\n      });\n      break;\n\n    case \"sal común\":\n      formulable = comprobasSalesVolatiles(sal, mapaElementos, elementos);\n      break;\n  }\n\n  return formulable;\n}\n\nexport default identificarCompuestosExcepcionales;","map":{"version":3,"sources":["/home/javi/Programacion/Web/Formulacion/src/excepciones.js"],"names":["identificarCompuestosExcepcionales","compuesto","mapaElementos","elementos","formulable","comprobarCompuestoBinario","oxido","aguaSistematica","hidruro","amoniacoSistematico","metanoSistematico","forEach","clave","valor","nombre","toLowerCase","descartarCartasUsadas","crearMapaCompuesto","Array","from","calcularPuntuacion","crearMapaCompuestoPuntuacion","comprobasSalesVolatiles","sal"],"mappings":"AAAA;AAEA,SAASA,kCAAT,CAA4CC,SAA5C,EAAuDC,aAAvD,EAAsEC,SAAtE,EAAiF;AAE7E;AAEA,MAAIC,UAAU,GAAG,KAAjB;;AAEA,UAAQH,SAAR;AAEI,SAAK,MAAL;AAEI;AACAG,MAAAA,UAAU,GAAGC,yBAAyB,CAACC,KAAD,EAAQC,eAAR,EAAyBL,aAAzB,EAAwCC,SAAxC,CAAtC;AAEA;;AAEJ,SAAK,UAAL;AACI;AACAC,MAAAA,UAAU,GAAGC,yBAAyB,CAACG,OAAD,EAAUC,mBAAV,EAA+BP,aAA/B,EAA8CC,SAA9C,CAAtC;AAEA;;AAGJ,SAAK,QAAL;AACIC,MAAAA,UAAU,GAAGC,yBAAyB,CAACG,OAAD,EAAUE,iBAAV,EAA6BR,aAA7B,EAA4CC,SAA5C,CAAtC;AAEA;;AAGJ,SAAK,OAAL;AAIID,MAAAA,aAAa,CAACS,OAAd,CAAsB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAE1C,YAAIA,KAAK,CAACC,MAAN,CAAaC,WAAb,OAA+B,SAA/B,IAA4CH,KAAK,IAAI,CAAzD,EAA4D;AAGxDI,UAAAA,qBAAqB,CAACC,kBAAkB,CAACC,KAAK,CAACC,IAAN,CAAW,CAACN,KAAK,CAACC,MAAN,CAAaC,WAAb,EAAD,CAAX,CAAD,EAA2CG,KAAK,CAACC,IAAN,CAAW,CAAC,CAAD,CAAX,CAA3C,CAAnB,EAAgFhB,SAAhF,CAArB,CAHwD,CAKxD;;AACAC,UAAAA,UAAU,GAAGgB,kBAAkB,CAACC,4BAA4B,CAACH,KAAK,CAACC,IAAN,CAAW,CAACN,KAAD,CAAX,CAAD,EAAsBK,KAAK,CAACC,IAAN,CAAW,CAAC,CAAD,CAAX,CAAtB,CAA7B,CAA/B;AAEH;AAGJ,OAbD;AAeA;;AAEJ,SAAK,WAAL;AAEIf,MAAAA,UAAU,GAAGkB,uBAAuB,CAACC,GAAD,EAAMrB,aAAN,EAAqBC,SAArB,CAApC;AAEA;AA/CR;;AAoDA,SAAOC,UAAP;AAEH;;AAED,eAAeJ,kCAAf","sourcesContent":["//Función que compruba las ecepciones\n\nfunction identificarCompuestosExcepcionales(compuesto, mapaElementos, elementos) {\n\n    //Comprueba si es formulable\n\n    var formulable = false;\n\n    switch (compuesto) {\n\n        case \"agua\":\n\n            //Le manda la formula de agua para comprobar que lo puede formular\n            formulable = comprobarCompuestoBinario(oxido, aguaSistematica, mapaElementos, elementos);\n\n            break;\n\n        case \"amoniaco\":\n            //Le manda la formula de agua para comprobar que lo puede formular\n            formulable = comprobarCompuestoBinario(hidruro, amoniacoSistematico, mapaElementos, elementos);\n\n            break;\n\n\n        case \"metano\":\n            formulable = comprobarCompuestoBinario(hidruro, metanoSistematico, mapaElementos, elementos);\n\n            break;\n\n\n        case \"ozono\":\n\n\n\n            mapaElementos.forEach(function (clave, valor) {\n\n                if (valor.nombre.toLowerCase() === \"oxígeno\" && clave >= 3) {\n\n\n                    descartarCartasUsadas(crearMapaCompuesto(Array.from([valor.nombre.toLowerCase()]), Array.from([3])), elementos);\n\n                    //Calcula la puntuacion\n                    formulable = calcularPuntuacion(crearMapaCompuestoPuntuacion(Array.from([valor]), Array.from([3])));\n\n                }\n\n\n            });\n\n            break;\n\n        case \"sal común\":\n\n            formulable = comprobasSalesVolatiles(sal, mapaElementos, elementos);\n\n            break;\n\n\n    }\n\n    return formulable;\n\n}\n\nexport default identificarCompuestosExcepcionales;"]},"metadata":{},"sourceType":"module"}