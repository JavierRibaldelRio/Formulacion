[{"/home/javi/Programacion/Web/Formulacion/Client/src/index.js":"1","/home/javi/Programacion/Web/Formulacion/Client/src/reportWebVitals.js":"2","/home/javi/Programacion/Web/Formulacion/Client/src/App.js":"3","/home/javi/Programacion/Web/Formulacion/Client/src/ListaCompuestoCreados.js":"4","/home/javi/Programacion/Web/Formulacion/Client/src/Validar.js":"5","/home/javi/Programacion/Web/Formulacion/Client/src/Marcador.js":"6","/home/javi/Programacion/Web/Formulacion/Client/src/ElementoReact.js":"7","/home/javi/Programacion/Web/Formulacion/Client/src/notificacion.js":"8","/home/javi/Programacion/Web/Formulacion/Client/src/palabrasClaves.js":"9","/home/javi/Programacion/Web/Formulacion/Client/src/PilaDeRobar.js":"10","/home/javi/Programacion/Web/Formulacion/Client/src/funcionCompuesto.js":"11","/home/javi/Programacion/Web/Formulacion/Client/src/ReproducirMusica.js":"12","/home/javi/Programacion/Web/Formulacion/Client/src/SustanciasSimples.js":"13","/home/javi/Programacion/Web/Formulacion/Client/src/crearMapaCompuesto.js":"14","/home/javi/Programacion/Web/Formulacion/Client/src/eliminarCompuestos.js":"15","/home/javi/Programacion/Web/Formulacion/Client/src/calcularPuntos.js":"16","/home/javi/Programacion/Web/Formulacion/Client/src/excepciones.js":"17","/home/javi/Programacion/Web/Formulacion/Client/src/buscarEnMapCompuestos.js":"18","/home/javi/Programacion/Web/Formulacion/Client/src/compuestoBinario.js":"19","/home/javi/Programacion/Web/Formulacion/Client/src/averiguarHalogenosAnfigenos.js":"20","/home/javi/Programacion/Web/Formulacion/Client/src/EncontrarSalesBinariasVolatiles.js":"21","/home/javi/Programacion/Web/Formulacion/Client/src/extraerPrefijo.js":"22","/home/javi/Programacion/Web/Formulacion/Client/src/comprobarSiHayPorNombre.js":"23","/home/javi/Programacion/Web/Formulacion/Client/src/ComprobarOrden.js":"24","/home/javi/Programacion/Web/Formulacion/Client/src/main.js":"25","/home/javi/Programacion/Web/Formulacion/Client/src/EquivalenciasNombres.js":"26","/home/javi/Programacion/Web/Formulacion/Client/src/jsonNoMetales.js":"27","/home/javi/Programacion/Web/Formulacion/Client/src/jsonElementos.js":"28","/home/javi/Programacion/Web/Formulacion/Client/src/pasarjsonAnfigenosHalogenos.js":"29","/home/javi/Programacion/Web/Formulacion/Client/src/barajar.js":"30","/home/javi/Programacion/Web/Formulacion/Client/src/BuscarElementoConSimbolo.js":"31","/home/javi/Programacion/Web/Formulacion/Client/src/objetosElementos.js":"32","/home/javi/Programacion/Web/Formulacion/Client/src/objetoNoMetal.js":"33","/home/javi/Programacion/Web/Formulacion/Client/src/TablaRecords.js":"34","/home/javi/Programacion/Web/Formulacion/Client/src/FilaRecords.js":"35"},{"size":500,"mtime":1628087836479,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":1628087836482,"results":"38","hashOfConfig":"37"},{"size":10297,"mtime":1628544922724,"results":"39","hashOfConfig":"37"},{"size":463,"mtime":1628545117505,"results":"40","hashOfConfig":"37"},{"size":2873,"mtime":1628087836472,"results":"41","hashOfConfig":"37"},{"size":603,"mtime":1628087836466,"results":"42","hashOfConfig":"37"},{"size":2753,"mtime":1628087836462,"results":"43","hashOfConfig":"37"},{"size":968,"mtime":1628087836479,"results":"44","hashOfConfig":"37"},{"size":1543,"mtime":1628087836482,"results":"45","hashOfConfig":"37"},{"size":2742,"mtime":1628087836472,"results":"46","hashOfConfig":"37"},{"size":14141,"mtime":1628087836476,"results":"47","hashOfConfig":"37"},{"size":487,"mtime":1628087836472,"results":"48","hashOfConfig":"37"},{"size":1515,"mtime":1628087836472,"results":"49","hashOfConfig":"37"},{"size":387,"mtime":1628087836476,"results":"50","hashOfConfig":"37"},{"size":2409,"mtime":1628087836476,"results":"51","hashOfConfig":"37"},{"size":838,"mtime":1628087836472,"results":"52","hashOfConfig":"37"},{"size":2055,"mtime":1628087836476,"results":"53","hashOfConfig":"37"},{"size":566,"mtime":1628087836472,"results":"54","hashOfConfig":"37"},{"size":5468,"mtime":1628087836476,"results":"55","hashOfConfig":"37"},{"size":2743,"mtime":1628087836472,"results":"56","hashOfConfig":"37"},{"size":3096,"mtime":1628087836466,"results":"57","hashOfConfig":"37"},{"size":694,"mtime":1628087836476,"results":"58","hashOfConfig":"37"},{"size":1041,"mtime":1628087836476,"results":"59","hashOfConfig":"37"},{"size":791,"mtime":1628087836462,"results":"60","hashOfConfig":"37"},{"size":4861,"mtime":1628087836479,"results":"61","hashOfConfig":"37"},{"size":1268,"mtime":1628087836466,"results":"62","hashOfConfig":"37"},{"size":662,"mtime":1628087836479,"results":"63","hashOfConfig":"37"},{"size":4677,"mtime":1628087836479,"results":"64","hashOfConfig":"37"},{"size":426,"mtime":1628087836482,"results":"65","hashOfConfig":"37"},{"size":414,"mtime":1628087836472,"results":"66","hashOfConfig":"37"},{"size":522,"mtime":1628087836462,"results":"67","hashOfConfig":"37"},{"size":553,"mtime":1628087836482,"results":"68","hashOfConfig":"37"},{"size":270,"mtime":1628087836479,"results":"69","hashOfConfig":"37"},{"size":1416,"mtime":1628414859634,"results":"70","hashOfConfig":"37"},{"size":337,"mtime":1628361141256,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1mxhx2e",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"74"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"74"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"74"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"74"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"74"},"/home/javi/Programacion/Web/Formulacion/Client/src/index.js",[],["162","163"],"/home/javi/Programacion/Web/Formulacion/Client/src/reportWebVitals.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/App.js",["164"],"/home/javi/Programacion/Web/Formulacion/Client/src/ListaCompuestoCreados.js",["165"],"/home/javi/Programacion/Web/Formulacion/Client/src/Validar.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/Marcador.js",["166"],"var React = require('react');   //Activa REACt\n\n\nclass Marcador extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n\n    }\n\n    //Lo que se devulve\n    render() {\n\n        //El html\n        return (\n            ///*Tabla donde estan los puntos*/}\n\n            <table className=\"Zona_Verificacion\">\n\n                <tbody>\n\n                    <tr>\n\n                        <td>{this.props.texto}:</td>\n\n                        <td>{this.props.puntuacion}</td>\n\n                    </tr>\n\n                </tbody>\n\n            </table>\n        )\n    }\n\n}\n\nexport default Marcador;","/home/javi/Programacion/Web/Formulacion/Client/src/ElementoReact.js",["167","168"],"import './elementos.css';\n\n\n\nvar React = require('react');   //Activa REACt\n\n\n\n//Definir la clase de react \nclass ElementoReact extends React.Component {\n\n    //constructor\n\n    constructor(props) {\n\n        super(props);\n\n        //Coge las valencias del objeto\n        this.state = { valencias: this.props.objeto.v };\n\n    }\n\n\n\n    //funcion de devolver\n\n    render() {\n\n        //Almacenala clase de CSS\n\n        var clasesCss;\n\n        //Hace lque las valencias seán iguales que las del objeto del elemento\n        this.state.valencias = this.props.objeto.v;\n\n        //Se ejecuta una vez por cada valencia\n        for (var i = 0; i < this.state.valencias.length; i++) {\n\n            //Remplaza las comas por en espacio\n            this.state.valencias = this.state.valencias.toString().replace(\",\", \" \");\n\n        }\n\n\n\n        //Si el númeor atomico de el elemento es =1\n        if (this.props.objeto.z === 1) {\n\n            //Su clade de css es hidrógeno\n            clasesCss = \"Hidrogeno\";\n\n        }\n        else {\n\n            clasesCss = this.props.objeto.tipo;\n\n        }\n\n        //Lo que devuelve\n        return (\n\n\n            //Crea la tabla\n\n            <table className={\"Tabla_Elementos \" + clasesCss} >\n\n                <tbody >\n\n                    <tr className=\"Numero_Atomico\" >\n                        {/*Número Atómico*/}\n\n                        <td>\n                            {this.props.objeto.z}\n                        </td>\n\n                        {/* Simbolo Químico */}\n                        <td rowSpan=\"2\" colSpan=\"3\" className=\"Simbolo_Quimico\">\n                            {this.props.objeto.sq}\n                        </td>\n\n                    </tr>\n\n                    <tr>\n\n\n                        {/* Contenedor de Valencias */}\n                        <td className=\"Valencias\">\n\n                            {this.state.valencias}\n\n                        </td>\n\n                    </tr>\n\n                    <tr>\n\n                        {/* Puntos */}\n\n                        <td className=\"Texto_dentro_de_tabla\">Puntos:</td>\n\n                        <td className=\"Puntos\">{this.props.objeto.puntos}</td>\n\n                    </tr>\n                    {/* Grupo */}\n                    <tr>\n                        <td className=\"Texto_dentro_de_tabla\">Grupo: </td>\n\n                        <td className=\"Grupo\">{this.props.objeto.grupo}</td>\n                    </tr>\n\n                    <tr>\n\n                        {/*Nombre del Elemento*/}\n\n                        <td colSpan=\"4\" className=\"Nombre Texto_dentro_de_tabla\">{this.props.objeto.nombre}</td>\n\n                    </tr>\n\n                </tbody>\n\n            </table>\n\n\n        );\n\n    }\n\n}\n\nexport default ElementoReact;","/home/javi/Programacion/Web/Formulacion/Client/src/notificacion.js",["169","170"],"import './notificacion.css'\n\nvar React = require('react');   //Activa REACt\n\n\nclass NotificacicionUsuario extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n\n\n        if (this.props.texto != undefined) {\n            //Le quita los espacios del principio\n            const texto = this.props.texto.trim();\n\n            //Añade la clase en funcion que sea true o  false\n            const clase = this.props.tipo ? \"Notificacion_correcta\" : \"Notificacion_incorrecta\";\n\n\n            return (\n\n                <table className={\"notificacion \" + clase}>\n\n                    <tbody>\n\n                        <tr>\n                            <td>\n                                {texto}\n                            </td>\n                        </tr>\n\n                    </tbody>\n\n                </table>\n\n            )\n        }\n\n        return (\n            <p></p>\n        )\n\n    }\n}\n\nexport default NotificacicionUsuario;","/home/javi/Programacion/Web/Formulacion/Client/src/palabrasClaves.js",["171","172"],"const hidruro = \"hidruro\";  //hidruro\n\nvar prefijos = [8]; //Definir array con 8 casillas una por cada prefijo\n\nprefijos[1] = \"mono\"; //1\n\nprefijos[2] = \"di\";   //2\n\nprefijos[3] = \"tri\";  //3\n\nprefijos[4] = \"tetra\";  //4\n\nprefijos[5] = \"penta\";  //5\n\nprefijos[6] = \"hexa\";     //6\n\nprefijos[7] = \"hepta\";  //7\n\nconst numeroDePrefijos = 7; //Siete porque no se pueden combinar más de siete cartas iguales\n\nconst halogenos = 16;   //Grupo de los Halógenos\n\nconst anfigenos = 17;   //Grupo de los anfígenos\n\n//Almacena el sufjo que se le añade a cada elemento \n\nconst sufijo16Y17 = \"uro\";  //Sin guión\n\n//Almacena el autentico nombre de azufre por sulfuro\n\nconst sulfuro = \"sulfuro\";\n\nconst numeroDeCartas = 8;\n\n//Almacena el numero de segundos de la notificación\nconst tiempoNotificacionSegundos = 5;\n\n//Almacena la palabra de los  oxidos\n\nconst oxido = \"óxido\";\n\n//Almacena la formula del agua\nconst aguaSistematica = \"óxido de dihidrógeno\";\n\n//Almacena el hidrógeno\nconst hidrogeno = \"hidrógeno\";\n//Almacena el carbono\nconst carbono = \"carbono\";\n\n//almacena la sal común\n\nconst sal = \"cloruro de sodio\";\n\n//Almacena la formula del amoniavo (NH3)\n\nconst amoniacoSistematico = \"trihidruro de nitrógeno\";\n\n//Alamacena el metano en sistematica (CH4)\n\nconst metanoSistematico = \"tetrahidruro de carbono\";\n\nexport default numeroDeCartas;\n\nexport { tiempoNotificacionSegundos };\nexport { carbono, hidrogeno, sulfuro, prefijos, oxido, numeroDePrefijos, hidruro, sal, metanoSistematico, amoniacoSistematico, aguaSistematica, sufijo16Y17 };","/home/javi/Programacion/Web/Formulacion/Client/src/PilaDeRobar.js",["173","174"],"\n\nimport ElementoReact from './ElementoReact';\nimport Marcador from './Marcador';\n\nvar React = require('react');   //Activa REACt\n\nclass PilaRobar extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = { cartaARobar: undefined, mazosRestantes: 2, contador: 0 };\n    }\n\n    //Función que se ejecuta al robar\n    robar() {\n\n        //Si hay más cartas en la banca y hay más repeticiones\n        if (this.state.contador < window.$baraja.length && this.state.mazosRestantes > 0) {\n\n            this.setState({ cartaARobar: this.props.robarUnaCarta(this.state.cartaARobar) });\n\n            this.setState({ contador: this.state.contador + 1 });\n\n        }\n        //Si no cambias el mazo\n        else if (this.state.contador >= window.$baraja.length && this.state.mazosRestantes >= 0) {\n\n\n            this.setState({ mazosRestantes: this.state.mazosRestantes - 1, contador: 0, cartaARobar: undefined })\n\n        } else {\n            this.props.terminarJuego();\n        }\n    }\n\n    render() {\n\n\n        if (this.state.cartaARobar === undefined || window.$cartaRobarUsada === true) {\n\n            return (\n                <table>\n                    <tbody>\n\n                        <tr>\n                            <td></td>\n\n                            <td>\n                                <input disabled={!this.props.jugando} type=\"image\" className=\"Foto_Robar\" src=\"Fotografias/PatronCartas/patroncarta.png\" height=\"180\" width=\"160\" onClick={this.robar.bind(this)}></input>\n\n                            </td>\n\n                            <td><Marcador texto=\"Repartos restantes\" puntuacion={this.state.mazosRestantes} /> </td>\n                        </tr>\n                    </tbody>\n                </table>\n            )\n\n        } else {\n\n            return (\n                <div className=\"Pila\" >\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    <ElementoReact objeto={this.state.cartaARobar} />\n                                </td>\n\n                                <td>\n                                    <input type=\"image\" className=\"Foto_Robar\" src=\"Fotografias/PatronCartas/patroncarta.png\" height=\"180\" width=\"160\" onClick={this.robar.bind(this)}></input>\n\n                                </td>\n                                <td>\n\n                                    <Marcador texto=\"Repartos restantes\" puntuacion={this.state.mazosRestantes} />\n\n                                </td>\n\n                            </tr>\n\n\n                        </tbody>\n                    </table>\n\n                </div >\n            )\n        }\n    }\n}\n\nexport default PilaRobar;","/home/javi/Programacion/Web/Formulacion/Client/src/funcionCompuesto.js",["175","176","177","178","179"],"//Importaciones\n\nimport identificarSustanciasSimples from './SustanciasSimples';\nimport descartarCartasUsadas from './eliminarCompuestos';\nimport crearMapaCompuesto from './crearMapaCompuesto';\nimport calcularPuntuacion from './calcularPuntos';\nimport identificarCompuestosExcepcionales from './excepciones';\nimport comprobarCompuestoBinario from './compuestoBinario';\nimport './palabrasClaves'\nimport { hidruro, prefijos, oxido } from './palabrasClaves';\nimport buscarElementoEnMapa from './buscarEnMapCompuestos';\nimport { sufijo16Y17, hidrogeno, carbono } from './palabrasClaves';\nimport averiguarHalogenosYAnfigenos from './averiguarHalogenosAnfigenos';\nimport { numeroDePrefijos } from './palabrasClaves';\nimport { crearMapaCompuestoPuntuacion } from './calcularPuntos';\nimport comprobarSalesBinariasVolatiles from './EncontrarSalesBinariasVolatiles';\n\n\n\n\n//Funcion que comprueva si es posible crear este compuesto\nfunction comprobarCompuesto(elementos, compuesto) {\n\n    //Error que sacara por pantalla\n    const errorCompuesto = \"Este compuesto no se puede crear\";\n\n    //Cromprovar si compuesto no es un texto\n    if (typeof compuesto != \"string\") {\n\n        //Error\n\n        console.log(typeof compuesto);\n\n    }\n    //si es un string\n    else {\n\n        compuesto = compuesto.trim(); //Quita si hay los primes y ultimos espacios\n\n        compuesto = compuesto.toLocaleLowerCase();  //Pasa a minusculas\n\n        const mapElementos = crearMap();    //Crear el mapa de les elementos\n\n        const compuestoPartido = compuesto.split(\" \");\n        //Comprueba las sustancias simples\n\n        if (compuestoPartido.length === 1) {\n\n            var salidaSS = identificarSustanciasSimples(compuestoPartido[0], elementos, mapElementos);\n\n            if (salidaSS !== false) {\n\n                //Crea el mapa del compuesto\n                var mapaCompuesto = new Map();\n\n                //Añade el elemento al mapa\n                mapaCompuesto.set(salidaSS, 2);\n\n                //eliminar las cartas que han sido usadas\n                descartarCartasUsadas(crearMapaCompuesto([salidaSS.nombre.toLocaleLowerCase()], [2]), elementos);\n\n                //Devulve la puntuación \n                return calcularPuntuacion(mapaCompuesto);\n\n\n            } else {\n\n                return identificarCompuestosExcepcionales(compuesto, mapElementos, elementos);\n\n            }\n\n\n\n\n        }\n        //Comprueba si es un hidruro\n        else if (compuesto.includes(hidruro) && buscarElementoEnMapa(mapElementos, \"H\")) {\n\n            return comprobarCompuestoBinario(hidruro, compuesto, mapElementos, elementos);\n\n        }\n\n        //comprobar si abace en uro\n        else if (compuestoPartido[0].endsWith(sufijo16Y17) && compuestoPartido[2].endsWith(\"hidrógeno\") && comprobarSiHayHidrogeno(mapElementos)) {\n\n            console.log(\"AnfigenoHAlogeno\");\n\n            //Preparar datos para la función de averiguar\n\n            //Coger la ultima palabra de el array, \n            const prefijoTexto = compuestoPartido[2].split(\"hidrógeno\");\n\n            //Almacena el prefijo del hidrogeno\n            var prefijo;\n\n\n            //Si no hay prefijo o es mono\n            if (prefijoTexto[0] === \"\" || prefijoTexto === prefijos[1]) {\n\n                prefijo = 1;\n\n            }\n            //es di\n            else if (prefijoTexto[0] === prefijos[2]) {\n\n                prefijo = 2;\n\n            } else {\n                return false;\n            }\n\n            const salida = averiguarHalogenosYAnfigenos(compuesto, mapElementos, prefijo, elementos);\n\n            return salida;\n        }\n\n        else if (compuesto.includes(oxido) && buscarElementoEnMapa(mapElementos, \"O\")) {\n\n            return comprobarCompuestoBinario(oxido, compuesto, mapElementos, elementos);\n\n        }\n\n        //Parte de sales binarias\n        else {\n\n            //MIra si es correcto y lo almacena\n            let correcto = comprobarSalesBinariasVolatiles(compuesto, mapElementos, elementos);\n\n            if (typeof correcto === \"boolean\") {\n\n                return identificarCompuestosExcepcionales(compuesto, mapElementos, elementos);\n\n            } else {\n\n                return correcto;\n\n            }\n\n            return false;\n        }\n    }\n\n    //Funciones\n\n    //Devuelve un mapa <objeto|Nº de repeticiones de ese objeto>\n    function crearMap() {\n\n        var mapaElementos = new Map();  //Map donde se almacenan el numero de repeticiones de cada elmento\n\n        //Se ejecuta una vez por el número de elementos que hay que coger\n        for (var i = 0; i < elementos.length; i++) {\n\n            var elementoOriginal = elementos[i]; //Almacena el elemento origianl\n\n            var contador = 1;   //Cuenta cuantas veces se repite un elemento\n\n            //si es igual al número \n            if (i < elementos.length - 1) {\n\n                //repetira esto hasta que el elemento cambie\n                while (i < elementos.length - 1 && elementoOriginal.sq == elementos[1 + i].sq) {\n\n                    i++;\n\n                    contador++;\n\n                }\n\n            }\n            mapaElementos.set(elementoOriginal, contador);  //Añade al mapa\n\n        }\n\n        return mapaElementos;   //Retorna el mapa\n    }\n\n\n    //Funcion para comprobar que prefijo es\n\n}\n\n//Devuelve que prefijo a sido a utilizado, por lo tanto el número\nfunction encontrarPrefijo(particula) {\n\n    //Se repirte una vez por el número de prefijos que haya\n    for (var i = 1; i < numeroDePrefijos; i++) {\n\n        //Si la particula es la misma que el prefijo\n        if (particula.startsWith(prefijos[i])) {\n\n            return i;   //Devuelve el número de la particula\n\n        }\n\n    }\n\n    return -1;\n\n}\n\n//Funcion para saber si el usuario tiene los elementos necesarios para poder crear el compuesto\n/*Hidrogeno*/   /*1*/                   /*Litio*/       /*1*/\nfunction comprobarSiPuedeGenerarCompuestos(primeraPalabra, prefijoPrimeraPalabra, segundaPalabra, prefijoSegundaPalabra, mapa) {\n\n    //Mirar si tiene los formatos correctos (2 textos y 2 números)\n    if (posibleTexto(primeraPalabra) && posibleTexto(segundaPalabra) && posibleNumero(prefijoPrimeraPalabra) && posibleNumero(prefijoSegundaPalabra)) {\n\n        //Se asegura de que la suma de los dos prefijos es menor que al número total de prefijos\n        if (prefijoPrimeraPalabra + prefijoSegundaPalabra <= numeroDePrefijos) {\n\n            //Eliminar los Nitrogenoides el carbonoide\n\n\n            //Asegurarse de que el compuesto esta simplificado al máximo\n            if (prefijoPrimeraPalabra > 1 && prefijoSegundaPalabra > 1) {\n\n                //Almacena el valor maximo del número de oxidación\n\n                var max, min;\n\n                //Almacena el resultado de la división de max/min\n\n                let division;\n\n                //Si el mayor es primero\n                if (prefijoPrimeraPalabra > prefijoSegundaPalabra) {\n\n                    max = prefijoPrimeraPalabra;\n\n                    min = prefijoSegundaPalabra;\n\n                }\n                //sino\n                else {\n                    max = prefijoSegundaPalabra;\n\n                    min = prefijoPrimeraPalabra;\n\n                }\n\n                //Divide el máximo entre el mínimo\n                division = max / min;\n\n                console.log(\"funciona correctamente\");\n\n                console.info(division);\n\n                //Si el valor de la division es igual a la prate entera de la división\n                //Es decir comprueba si es entero o decimal\n\n                if (division === Math.floor(division)/*Math.floor() saca la parte entera de la coma*/) {\n\n                    return false;\n\n                }\n\n\n            }\n\n            //Se asegura de que los compuestos estan\n            if (comprobarSiEstanLosCompuestos(primeraPalabra, prefijoPrimeraPalabra, mapa) && comprobarSiEstanLosCompuestos(segundaPalabra, prefijoSegundaPalabra, mapa)) {\n\n                //Almaceno lo que se va ha devolver\n                var devol;\n\n                //Array de objetos que almacena los objetos utilizados para este compuesto\n                var arrayCompuesto = crearArrayCompuesto(); //Crea un array corresponde al compuesto\n\n                if (arrayCompuesto[0].nombre.toLocaleLowerCase() === hidrogeno) {\n\n                    console.log(\"CArbonoides,Nitrogenoides\");\n\n                    if (arrayCompuesto[1].grupo === 15) {\n\n                        if (prefijoPrimeraPalabra != 3) {\n                            return false;\n                        }\n\n                    } else if (arrayCompuesto[1].nombre.toLocaleLowerCase() === carbono) {\n\n                        if (prefijoPrimeraPalabra != 4) {\n                            return false;\n                        }\n\n                    }\n\n                }\n\n                //Devolver el valor de neutro\n                const devolver = neutro();\n\n                if (devolver === true) {\n                    //Calcula puntaución, la cual requiere un mapa de el compuesto, para eso utilizo la función de crearMapaCompuesto la cual pide un array de elemen\n                    devol = calcularPuntuacion(crearMapaCompuestoPuntuacion(arrayCompuesto, [prefijoPrimeraPalabra, prefijoSegundaPalabra]));\n\n                }\n\n                else {\n                    devol = false;\n                }\n\n                return devol;\n\n                //funcion que dice si da neutro (0) o estable\n\n                function neutro() {\n\n                    var valencias1, valencias2;\n\n                    //Crea el array de valencias sumadas de cada elemento\n                    valencias1 = operar(arrayCompuesto[0].v, prefijoPrimeraPalabra);\n\n                    valencias2 = operar(arrayCompuesto[1].v, prefijoSegundaPalabra);\n\n                    //Comprueva si la suma de los arrays de valencias es neutro\n                    if (sumar(valencias1, valencias2)) {\n\n                        return true;\n\n                    } else {\n\n                        return -1;\n                    }\n\n                    //Suma todas las casillas de todos los arrays\n\n                    function sumar(array1, array2) {\n\n                        //Coge la casilla indicada del array\n                        for (var i = 0; i < array1.length; i++) {\n\n                            //Coge la casilla indicada del 2º array\n                            for (var j = 0; j < array2.length; j++) {\n\n                                //Si la suma de los arrays es o deveulve true por que es neutro\n                                if ((array1[i] + array2[j]) === 0) {\n\n                                    return true;\n                                }\n                            }\n                        }\n\n                        //Si no devuelve true devulve false\n                        return false;\n                    }\n\n                    //Multiplica las valencias por el numero de repeticiones del elmetneo\n                    function operar(valencias, repeticiones) {\n\n                        var arrayVuelta = [];   //El array que devolveras\n\n                        // Se ejecuta una ve por cada casilla del array\n                        for (var i = 0; i < valencias.length; i++) {\n\n                            //Multiplica la casilla de la valencia por las repeticiones y la añade al array\n                            arrayVuelta.push(valencias[i] * repeticiones);\n\n                        }\n\n                        return arrayVuelta;     //Multiplica el array\n\n                    }\n                }\n\n                //Función que estrae los datos necesarios\n                function crearArrayCompuesto() {\n\n                    var arrayCompuesto = [];    //Crea el a el array\n\n                    //Se ejecuta una vez por cada elemento del array\n                    mapa.forEach(function (valor, key) {\n\n                        anadir(primeraPalabra, key);\n\n                    });\n\n                    //Se ejecuta una vez por cada elemento del array\n\n                    mapa.forEach(function (valor, key) {\n\n                        anadir(segundaPalabra, key);\n\n                    });\n\n                    //Añade el elemento al array\n                    function anadir(palabra, key) {\n                        //Si es igual lo añade\n                        if (key.nombre.toLocaleLowerCase() === palabra) {\n\n                            arrayCompuesto.push(key);   //Añade al array la palabra\n\n                        }\n                    }\n\n                    return arrayCompuesto;  // Devuelve el array\n                }\n\n            }\n\n        }\n\n        //Error\n        else {\n            return -1;\n        }\n\n        //Error    \n    }\n    else {\n\n        return -1;\n\n    }\n\n\n    //Comueva si es un texto\n    function posibleTexto(text) {\n\n        return typeof text === \"string\";\n\n    }\n\n    //Compreuva si es un numero\n\n    function posibleNumero(numero) {\n\n        return typeof numero === \"number\";\n\n    }\n\n    //funcion para comprobar si esta el elemento\n\n    function comprobarSiEstanLosCompuestos(nombre, numero, map) {\n\n        var devolucion = false; //Variable que será devuelta\n\n        map.forEach(function (value, key) {\n\n\n            //Comprueva si el elemento esta dentro del map  y tiene tantas repeticiones como es indicado por el prfijo\n\n            if (key.nombre.toLocaleLowerCase() === nombre && value >= numero) {\n\n                devolucion = true;\n\n            }\n        });\n\n        return devolucion;\n\n    }\n\n}\n\n//funcion àra coomprovar si hay hidrogeno\n\nfunction comprobarSiHayHidrogeno(mapaElementos) {\n\n    var devolver = false;   //Lo que se devolvera\n\n    //Mirar si el hidrogeno se encuentra en el mapa de los elementos\n    mapaElementos.forEach(function (value, key) {\n\n        const sqElemento = key.sq; //Coge de la clave\n\n        //Si el sq es igual a la del hidrógeno\n        if (sqElemento === \"H\") {\n\n            devolver = true;    //Cambia la devolución a true\n\n        }\n    });\n\n    return devolver;    //Devuelve\n\n}\n\nexport default comprobarCompuesto;\nexport { comprobarSiHayHidrogeno };\nexport { encontrarPrefijo, comprobarSiPuedeGenerarCompuestos };","/home/javi/Programacion/Web/Formulacion/Client/src/ReproducirMusica.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/SustanciasSimples.js",["180"],"//Función que se ocupa de identificar si es una sustanci simple\n\nfunction identificarSustanciasSimples(textoUsuario, elementosDisponibles, map) {\n\n    ///////////////////////////////////////\n\n    //Almacena el resultado\n\n    var resultadoFuncion = false;\n\n    //Pasa a minúsculas\n\n    textoUsuario = textoUsuario.trim();\n\n    //Quita espacios a principio de palabra\n\n    textoUsuario = textoUsuario.toLowerCase();\n\n    //Comprueba con todos el elementos\n    for (var i = 0; i < elementosDisponibles.length; i++) {\n\n        if (elementosDisponibles[i].nombre.toLowerCase() === textoUsuario) {\n\n            //Se repite una vez por cada \n            for (var j = 0; j < elementosDisponibles[i].v.length; j++) {\n                /*Los que tienen valencia -a*/          /*El oxígeno */                       /*El nitrógeno*/\n                if (elementosDisponibles[i].v[j] === -1 || elementosDisponibles[i].z === 8 || elementosDisponibles[i].z === 7) {\n\n                    //Se repite una vez por cada elemento del map\n                    map.forEach(function (valor, key) {\n\n                        if (key.nombre.toLowerCase() === elementosDisponibles[i].nombre.toLowerCase()) {\n\n                            if (valor >= 2) {\n                                resultadoFuncion = elementosDisponibles[i];\n                            }\n                        }\n                    });\n\n                }\n\n\n            }\n\n        }\n\n\n    }\n\n    return resultadoFuncion;\n}\n\nexport default identificarSustanciasSimples;","/home/javi/Programacion/Web/Formulacion/Client/src/crearMapaCompuesto.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/eliminarCompuestos.js",["181","182","183"],"\n//Función que elimina las cartas usadas\n\nfunction descartarCartasUsadas(mapaCompuesto, elementosEnBanca) {\n\n    var totalDeCartasUsadas;    //VAriable que almacena la suma de valores\n\n    var arrayValores = [];   //Matriz que almacena todos los valores\n\n    //El valor es el numero de repeticiones y la clave el elemento\n    mapaCompuesto.forEach(function (valor, clave) {\n\n        arrayValores.push(valor);\n\n        for (var i = 0; i < elementosEnBanca.length; i++) {\n\n            if (clave === elementosEnBanca[i].nombre.toLocaleLowerCase()) {\n\n                elementosEnBanca.splice(i, valor);\n\n                //Comprovar si carta robado no esta definida\n\n                if (window.$cartaRobada != undefined) {\n\n                    if (elementosEnBanca[i + 1] === undefined) {\n                        window.$cartaRobarUsada = true;\n\n                    }\n\n                    //Si el nombre de la carta robada es igual a la clave   \n                    else if (window.$cartaRobada.nombre.toLocaleLowerCase() === clave && elementosEnBanca[i + 1].nombre.toLocaleLowerCase() != clave) {\n                        window.$cartaRobarUsada = true;\n\n                    }\n                }\n                //Evitar la repetición del bucle\n\n                i = 10;\n\n            }\n        }\n\n    });\n\n    totalDeCartasUsadas = sumarArray(arrayValores);\n\n    window.$cartasDisponibles = elementosEnBanca;\n\n    if (window.$cartasDisponibles.length < 8) {\n\n        window.$cartaRobarUsada = true\n\n        const cartasARobar = 8 - window.$cartasDisponibles.length;\n\n        for (var i = 0; i < cartasARobar; i++) {\n\n            //Añadir la primera carta a la banca\n            window.$cartasDisponibles.push(window.$baraja.splice(2, 1)[0]);\n\n            //Eliminar la segunda carta de la baraja\n\n            //Prdena\n            window.$cartasDisponibles.sort(function (a, b) {\n                if (a.z > b.z) {\n                    return 1;\n                }\n                else if (a.z < b.z) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n            });\n\n            console.log(window.$cartaRobarUsada);\n\n        }\n\n    }\n\n\n\n}\n\n//Funcion sumar un array\n\nfunction sumarArray(arr) {\n\n\n    var suma;\n\n    for (var i = 0; i < arr.length; i++) {\n\n        suma = + arr[i]\n\n    }\n\n    return suma;\n\n}\n\nexport default descartarCartasUsadas;","/home/javi/Programacion/Web/Formulacion/Client/src/calcularPuntos.js",["184"],"import { exp } from \"prelude-ls\";\n\n//Se le pasa un mapa de puntos y devuelve le número de puntos que se obtieneen al realizar ese compuesto\nfunction calcularPuntuacion(mapaPuntos) {\n\n    //Almacena la puntuación de salida\n    var salida = 0;\n\n    //Aplica a todos los elementos del Map\n\n    mapaPuntos.forEach(function (key, valor) {\n\n        //Variable donde se almacena el sumar\n\n        salida = salida + valor.puntos * key;\n\n\n\n    });\n    return salida;\n\n}\n\n//Hace el mapa con el que se le manda a Mapa puntos\n\nfunction crearMapaCompuestoPuntuacion(arrayCompuesto, arrayRepeticiones) {\n\n    var mapa = new Map();\n\n    for (var i = 0; i < arrayCompuesto.length; i++) {\n\n        mapa.set(arrayCompuesto[i], arrayRepeticiones[i]);\n\n    }\n\n    return mapa;\n}\n\nexport default calcularPuntuacion;\n\nexport { crearMapaCompuestoPuntuacion };","/home/javi/Programacion/Web/Formulacion/Client/src/excepciones.js",["185"],"//Función que compruba las ecepciones\nimport comprobarCompuestoBinario from \"./compuestoBinario\";\nimport { crearMapaCompuestoPuntuacion } from \"./calcularPuntos\";\nimport calcularPuntuacion from \"./calcularPuntos\";\n\nimport descartarCartasUsadas from \"./eliminarCompuestos\";\nimport crearMapaCompuesto from \"./crearMapaCompuesto\";\nimport comprobarSalesBinariasVolatiles from \"./EncontrarSalesBinariasVolatiles\";\n\nimport { oxido, hidruro, sal, metanoSistematico, amoniacoSistematico, aguaSistematica } from './palabrasClaves';\n\n\nfunction identificarCompuestosExcepcionales(compuesto, mapaElementos, elementos) {\n\n    //Comprueba si es formulable\n\n    var formulable = false;\n\n    switch (compuesto) {\n\n        case \"agua\":\n\n            //Le manda la formula de agua para comprobar que lo puede formular\n            formulable = comprobarCompuestoBinario(oxido, aguaSistematica, mapaElementos, elementos);\n\n            break;\n\n        case \"amoniaco\":\n            //Le manda la formula de agua para comprobar que lo puede formular\n            formulable = comprobarCompuestoBinario(hidruro, amoniacoSistematico, mapaElementos, elementos);\n\n            break;\n\n\n        case \"metano\":\n            formulable = comprobarCompuestoBinario(hidruro, metanoSistematico, mapaElementos, elementos);\n\n            break;\n\n\n        case \"ozono\":\n\n\n\n            mapaElementos.forEach(function (clave, valor) {\n\n                if (valor.nombre.toLowerCase() === \"oxígeno\" && clave >= 3) {\n\n\n                    descartarCartasUsadas(crearMapaCompuesto(Array.from([valor.nombre.toLowerCase()]), Array.from([3])), elementos);\n\n                    //Calcula la puntuacion\n                    formulable = calcularPuntuacion(crearMapaCompuestoPuntuacion(Array.from([valor]), Array.from([3])));\n\n                }\n\n\n            });\n\n            break;\n\n        case \"sal común\":\n\n            formulable = comprobarSalesBinariasVolatiles(sal, mapaElementos, elementos);\n\n            break;\n\n\n    }\n\n    return formulable;\n\n}\n\nexport default identificarCompuestosExcepcionales;","/home/javi/Programacion/Web/Formulacion/Client/src/buscarEnMapCompuestos.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/compuestoBinario.js",["186","187"],"import { prefijos, oxido, numeroDePrefijos, hidruro } from './palabrasClaves';\nimport { encontrarPrefijo, comprobarSiPuedeGenerarCompuestos } from './funcionCompuesto'\nimport nombresEquivalentes from './EquivalenciasNombres';\nimport crearMapaCompuesto from \"./crearMapaCompuesto\";\nimport descartarCartasUsadas from './eliminarCompuestos';\n\n\nfunction comprobarCompuestoBinario(compuestoBinarioABuscar, compuesto, mapElementos, elementos) {\n\n    //Comprobar si el compuesto tiene las suficientes letras para valorarse\n\n    if (compuesto.trim().split(\" \").length != 3) {\n\n        return false;\n\n    }\n\n    // console.log(\"Incluye hidruro\");\n\n    var binarioIncorrecto = true;   //para comprobar si hay que avisar al usuario de un error\n\n    var primerPrefijo = prefijos[1];\n    //Como el monoóxido lleva solo f\n    if (compuestoBinarioABuscar === oxido) {\n        primerPrefijo = \"mon\"\n    }\n\n    //Si lo es comprueba cuantas meleculas tiene de hidruro\n    if (compuesto.startsWith(compuestoBinarioABuscar) || compuesto.startsWith(primerPrefijo + compuestoBinarioABuscar)) {\n\n        // console.log(\"mono\");\n\n        const resultado = ejecucionBinario(1);  //Lo que se ha de ejecutar en caso de que sea un hidrudo\n\n        //Si es falso devuelves resultado\n        if (false === resultado) {\n\n            return false;\n\n        }\n\n        //Si no es falso y es verdadero devuelves true\n        else if (typeof resultado === \"number\") {\n\n            return resultado;\n\n        }\n\n    } else {\n\n        //Se ejecuta una vez por cada prefijo\n        for (var i = 2; i < numeroDePrefijos; i++) {\n\n            //Comprueba con que prefijos coinciden con el prefijo\n            if (compuesto.startsWith(prefijos[i] + compuestoBinarioABuscar)) {\n\n                const resultado = ejecucionBinario(i);  //Lo que se ha de ejecutar en caso de que sea un hidrudo\n\n                //Si es falso devuelves resultado\n                if (false === resultado) {\n\n                    return false;\n\n                }\n\n                //Si no es falso y es verdadero devuelves true\n                else if (typeof resultado === \"number\") {\n\n                    return resultado;\n\n                }\n\n                i = numeroDePrefijos; //Para que no lo comprueve más el for, de esa forma se deja de comprobar si el prefijo es el mismi\n            }\n\n        }\n\n    }\n\n\n    //Lo que se tiene que ejecutar si es un hidruro\n    function ejecucionBinario(numero) {\n\n        binarioIncorrecto = false;  // Para marcar que no ahí error\n\n        var sal = averiguarCompuestoBinario(compuesto, mapElementos, numero, compuestoBinarioABuscar, elementos);\n\n        // console.log(sal)\n\n        if (typeof sal === \"number\") {\n\n\n            return sal;\n\n\n        } else {\n\n            return false;\n\n        }\n\n    }\n}\n\nfunction averiguarCompuestoBinario(texto, mapa, prefijoBinario1, primerCompuesto, elementos) {\n\n    var devolver = false;   //Almacena lo que se va ha devolver\n\n    texto = texto.trim()    //Para quitar leos espacios a pricipio de palabra\n\n    var textoSeparado = texto.split(\" \");   //Para separar las palabras en meterlas en un array invididual\n\n    // console.log(textoSeparado);\n\n    var elemento = textoSeparado[2];    //coger el tercer trozo de el array de palabras torceadas\n\n    var nombreSegundoElemento;\n\n    var numeroPrefijoSegundoElemento;\n\n    //Se ejecuta por cada casilla del mapa\n    mapa.forEach(function (valor, key) {\n\n        //Almacena el nombre del segundo compuesto\n        const nombre = key.nombre/*Coger la propiedad*/.toLocaleLowerCase();    //Para pasar a minusculas\n\n        //Si acaba con nombre\n        if (elemento.endsWith(nombre)) {\n\n            //Prefijo del 2º Elemnto\n\n            var prefijoMultipicador = elemento.split(nombre)[0]; //Sacar el prefijo\n\n            //Si no hay particula quiere decir que es 1(mono)\n            if (prefijoMultipicador === \"\") {\n\n                numeroPrefijoSegundoElemento = 1;      //Ya que si no hay nada es mono\n\n            }\n\n            //Para encontrar el prefijo               \n            else {\n\n                numeroPrefijoSegundoElemento = encontrarPrefijo(prefijoMultipicador);\n\n            }\n\n            // console.log(numeroPrefijoSegundoElemento);\n\n            //Si número de prefijo es -1 [ERROR] o es de un grupo de los anfigenos o Halogenos\n            if (numeroPrefijoSegundoElemento === -1) {\n\n                return false;\n\n            }\n\n            if (key.grupo > 15 && hidruro === primerCompuesto) {\n                return false;\n            }\n            //Devuelve -2\n\n            //Asigna a la variable del mapa\n\n            nombreSegundoElemento = nombre;\n\n\n\n            //Dice si es posible combinar los introducidios, sumar y comprobar valencias\n            devolver = comprobarSiPuedeGenerarCompuestos(nombresEquivalentes(primerCompuesto), prefijoBinario1, nombre, numeroPrefijoSegundoElemento, mapa);\n\n        }\n\n    });\n\n    //Si es un numero\n    if (typeof devolver === \"number\") {\n\n        //Creamos la matriz del compuesto\n\n        const elementosUsados = [nombresEquivalentes(primerCompuesto), nombreSegundoElemento.toLocaleLowerCase()];\n\n        const repeticionesElementosUsados = [prefijoBinario1, numeroPrefijoSegundoElemento];\n\n        const mapaCompuesto = crearMapaCompuesto(elementosUsados, repeticionesElementosUsados);\n\n        descartarCartasUsadas(mapaCompuesto, elementos);\n    }\n\n    return devolver;\n\n}\n\nexport default comprobarCompuestoBinario;\n","/home/javi/Programacion/Web/Formulacion/Client/src/averiguarHalogenosAnfigenos.js",["188"],"\nimport extraerPrefijos from \"./extraerPrefijo\";\nimport { sulfuro } from \"./palabrasClaves\";\nimport { encontrarPrefijo } from \"./funcionCompuesto\";\nimport descartarCartasUsadas from \"./eliminarCompuestos\";\nimport crearMapaCompuesto from \"./crearMapaCompuesto\";\n\nimport { comprobarSiPuedeGenerarCompuestos } from \"./funcionCompuesto\";\n\n//Función que comprueba si es un hidruro\nfunction averiguarHalogenosYAnfigenos(texto, mapa, prefijoHidrogeno, elementosDisponibles) {\n\n    //Array de cartas de todos los Halógenos y Anfígenos\n    var cartasHidracidos = encontrarEnBancaAnfigenosYHalogenos();\n\n    //Separa el texto en palabras y coge la primera\n    var primerElemento = texto.split(\" \")[0];\n\n    //Almacena el elemento sin el prefijo\n    var primerElementoSinPrefijoConSufijo = extraerPrefijos(primerElemento);\n\n    //Almacena el prefijo del Primer Elemento\n    var prefijoPrimerElemento;\n\n    //Primer elmento almacenado correctamente\n    var elemento1;\n\n    for (var i = 0; i < cartasHidracidos.length; i++) {\n\n        //Primer elemento\n        switch (primerElementoSinPrefijoConSufijo.substr(0, 2)) {\n\n            case cartasHidracidos[i].nombre.toLowerCase().substr(0, 2):\n\n                elemento1 = cartasHidracidos[i].nombre.toLowerCase();\n\n                break;\n\n            case sulfuro.substr(0, 2):\n\n                elemento1 = \"azufre\";\n\n                break;\n        }\n    }\n\n    if (elemento1 === undefined) {\n\n        return false;\n\n    }\n\n    if (primerElemento.startsWith(elemento1.substr(0, 2)) || elemento1 === \"azufre\") {\n\n        prefijoPrimerElemento = 1;\n    }\n\n    else {\n        prefijoPrimerElemento = encontrarPrefijo(primerElemento.split(elemento1)[0]);\n\n\n    }\n    if (elemento1.grupo < 16) {\n\n        return false;\n\n    }\n\n\n    const salida = comprobarSiPuedeGenerarCompuestos(elemento1, prefijoPrimerElemento, \"hidrógeno\", prefijoHidrogeno, mapa);\n\n    if (typeof salida === \"number\") {\n\n        const elementosUsados = [\"hidrógeno\", elemento1];\n\n        const repeticionesElementosUsados = [prefijoHidrogeno, prefijoPrimerElemento];\n\n        const mapaCompuesto = crearMapaCompuesto(elementosUsados, repeticionesElementosUsados);\n\n        descartarCartasUsadas(mapaCompuesto, elementosDisponibles);\n\n        return salida\n\n    } else {\n\n\n        return false\n\n    }\n\n    function encontrarEnBancaAnfigenosYHalogenos() {\n\n        var arrayDeHidracidos = [];\n\n        for (var i = 0; i < elementosDisponibles.length; i++) {\n\n            if (elementosDisponibles[i].grupo === 16 || elementosDisponibles[i].grupo === 17) {\n\n                arrayDeHidracidos.push(elementosDisponibles[i]);\n\n            }\n\n        }\n\n        return arrayDeHidracidos;\n\n    }\n\n}\n\nexport default averiguarHalogenosYAnfigenos;","/home/javi/Programacion/Web/Formulacion/Client/src/EncontrarSalesBinariasVolatiles.js",["189"],"import { oxido } from './palabrasClaves';\n\nimport { noMetales } from './main';\nimport extraerPrefijos from './extraerPrefijo';\nimport nombresEquivalentes from './EquivalenciasNombres';\n\nimport comprobarSiHayElementoPorNombre from './comprobarSiHayPorNombre';\nimport buscarElementoEnMapa from './buscarEnMapCompuestos';\nimport comprobarOrdenCorrecto from './ComprobarOrden';\n\nimport comprobarCompuestoBinario from './compuestoBinario';\n\n\n// Funcion que se ocupa de encontar las sales bianrias, su objetivo es:\n// ejecutar la función de identificar compuestouna vez por cada tipo de sal \n// binaria que pueda encontrar\n\nfunction comprobarSalesBinariasVolatiles(textoUsuario, mapaElementos, elementosDisponibles) {\n\n\n\n    for (var i = 0; i < noMetales.length; i++) {\n\n        if (textoUsuario.includes(noMetales[i].nuevoNombreElemento.toLowerCase()) && buscarElementoEnMapa(mapaElementos, noMetales[i].sq)) {\n\n            //Zona de mirar si tiene el orden correcto de la z\n\n\n            function comprobarSiEsCorrecto(texto) {\n\n                //Guarda el nommbre del compuesto en forma de matriz de palabras\n                var textoPartido = [];\n\n                //almacena el elemento\n                var textoSinPrefijo;\n\n                //almacenara la salida de comproca Si hay elemento por nombre\n                var salidaComprobarSiHayElementoPorNombre;\n\n                //Quitar los espacios de palabra ha pricipio de  texto\n\n                texto = texto.trim();\n\n                //Recorta por espacios y lo combierte en un array de palabras\n                textoPartido = texto.split(\" \");\n\n                //Extrae el prefijo de la última palabra de texto partido y lo almacena\n                textoSinPrefijo = extraerPrefijos(textoPartido[textoPartido.length - 1]);\n\n                //asigan ha salidaComprobarSiHayElementoPorNombre la salida de \n                salidaComprobarSiHayElementoPorNombre = comprobarSiHayElementoPorNombre(textoSinPrefijo, elementosDisponibles);\n\n                if (salidaComprobarSiHayElementoPorNombre === false || salidaComprobarSiHayElementoPorNombre.nombre.toLowerCase() === nombresEquivalentes(oxido)) {\n\n                    return false;\n\n                } else {\n\n                    //Almacena el primer elemento\n\n                    var primerElmento = comprobarSiHayElementoPorNombre(nombresEquivalentes(noMetales[i].nuevoNombreElemento.toLowerCase()), elementosDisponibles);\n\n                }\n\n\n                return comprobarOrdenCorrecto(primerElmento, salidaComprobarSiHayElementoPorNombre);\n\n            }\n\n            //Cmprueba si es correcto el orden del texto del usuario\n            if (comprobarSiEsCorrecto(textoUsuario) === false) {\n                return false;\n            }\n            //Deveulve el resultado\n            else {\n                return comprobarCompuestoBinario(noMetales[i].nuevoNombreElemento.toLowerCase(), textoUsuario, mapaElementos, elementosDisponibles);\n\n            }\n        }\n\n    }\n\n    //Devuelve falso si no encuentra nada\n\n    return false;\n\n}\n\nexport default comprobarSalesBinariasVolatiles;","/home/javi/Programacion/Web/Formulacion/Client/src/extraerPrefijo.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/comprobarSiHayPorNombre.js",["190"],"//Función que sribe para saver si el elemento se encuenttra en el array\n\nimport { comprobarSiPuedeGenerarCompuestos } from \"./funcionCompuesto\";\n\nfunction comprobarSiHayElementoPorNombre(elementoABuscar/*texto*/, elementosPosibles/*Array*/) {\n\n    //Lo que se va a devolver\n    var valorADevolver;\n\n    //Elimina espacios a principio y a final de palabra\n    elementoABuscar = elementoABuscar.trim();\n\n    //Pasa a minusculas\n    elementoABuscar = elementoABuscar.toLowerCase();\n\n    //Deveulve el objeto cumpla las condiciones\n    valorADevolver = elementosPosibles.find(hayElemento);\n\n    //si el valor de valorADevolver esta indefinido, es decir que no hay ningun elemento que cumpla las condicioenes devuelve falso\n    if (valorADevolver === undefined) {\n\n        valorADevolver = false;\n    }\n\n\n    return valorADevolver\n\n    function hayElemento(elemento) {\n\n        //Quita espacios y pas a minusculas\n        return elemento.nombre.trim().toLowerCase() === elementoABuscar;\n\n    }\n}\n\nexport default comprobarSiHayElementoPorNombre;\n","/home/javi/Programacion/Web/Formulacion/Client/src/ComprobarOrden.js",["191"],"//Esta función se ocupa de indicar si el orden de los elementos a la hora de escribir el compuesto es correcot\nfunction comprobarOrdenCorrecto(primerElmento, segundoElemento) {\n\n    // si el frupo del segundo es mayor que eldel primero\n    if (segundoElemento.grupo < primerElmento.grupo) {\n        return true;\n    }\n    //Si el grupo del primer elemento es mayor que el del segundo\n    else if (segundoElemento.grupo > primerElmento.grupo) {\n\n        return false;\n\n    }\n\n    //Si son iguales\n\n    else {\n\n        //Si el número atómico del segundo elemento es mayor que el 1 es mayor que\n        if (segundoElemento.z > primerElmento.z) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    return false;\n}\n\nexport default comprobarOrdenCorrecto;","/home/javi/Programacion/Web/Formulacion/Client/src/main.js",["192","193","194"],"import jsonNoMetales from './jsonNoMetales'\nimport jsonElementos from './jsonElementos'\nimport pasarAJsonAnfigenosHalogenos from './pasarjsonAnfigenosHalogenos';\nimport numeroDeCartas from './palabrasClaves';\n\nimport shuffle from './barajar';\nimport Elemento from './objetosElementos';\n//Crea el array de sales binarias\n\nconst jsonDatosNoMetales = JSON.parse(jsonNoMetales);\n\nconst noMetales = pasarAJsonAnfigenosHalogenos(jsonDatosNoMetales);\n\n//Para coger los datos de el json\nvar jsonDatosElementos = JSON.parse(jsonElementos);\n\nvar arrayClases = pasarJsonAClases(); //Array que contiene todas las clases\n\nvar puntos; //Almacena el número\n\nvar numeroElementosACoger = 8;\n\n//Baraja barajada\nwindow.$baraja = shuffle(crearBarajaOrdenada(arrayClases));\n\nwindow.$cartasDisponibles = window.$baraja.splice(0, numeroDeCartas);\n\nwindow.$cartasDisponibles.sort(function (a, b) {\n    if (a.z > b.z) {\n        return 1;\n    }\n    else if (a.z < b.z) {\n        return -1;\n    }\n    else {\n        return 0;\n    }\n});\n\nwindow.$cartaRobarUsada = false\n\n//Funciones\n//Convertir en array numerico el string de las valencias ya que del json vienen en forma de texto\nfunction convertirArrayValencias(texto) {\n\n    //Mirar si el input es un numero o otra cosa\n    if (typeof texto === \"number\") {\n\n        //Si es número es decir que solo hay un numero ya que si hubiera más de un número estaría separado por una coma y sería un texto\n\n        return Array.from([texto]);\n\n    }\n    //Si no es un numero ejectura esto\n    else {\n\n        const coma = \",\"; //Almacena el elemento que partira el array\n\n        //Crea un array que cada casilla se corresponde un trozo del string partido| se parte cada vez que encuentre una coma\n        var arrayTexto = texto.split(coma);\n\n        //Transforma las casilleas en numero\n        for (var i = 0; i < arrayTexto.length; i++) {   //Coge la lonjitud del array y ejecuta el bucle a cada casilla del array\n\n            arrayTexto[i] = Number(arrayTexto[i]);  //Hace que los textos pases a ser números, ya que los números negativos sonalmacenados en forma de textos y los numeros positivos son akmacenados en forma de número\n\n        }\n\n        return arrayTexto;      // Devuelve el  array con el texto ya transformado en una array\n    }\n\n}\n\n//Convertir todos los elementos del json en clases de ojetos\nfunction pasarJsonAClases() {\n\n    var arrayContenedorObjetos = []; //Donde se guardaran las clases\n\n    // Se ejecuta una vez por cada elemento del json, cada vez que se haga la varible i que hrá función de contador sera aumentada automáticamente \"+1\"\n    for (var i = 0; i < jsonDatosElementos.length/*coger la lonjitud del json*/; i++) {\n\n        //Almacena en una variable en nuevo objeto que va a crear de forma temporal\n        var nuevoElemento =\n\n            //constructor\n            new Elemento(\n\n                jsonDatosElementos[i].z,                                //Coge del elemento i la z y se la pasa al objeto\n                jsonDatosElementos[i].nombre,                           //Coge del elemento i el nomabre y se la pasa al objeto\n                jsonDatosElementos[i].sq,                               //Coge del elemento i el simbolo químco y se la pasa al objeto\n                convertirArrayValencias(jsonDatosElementos[i].v),       //Coge del elemento i la el  texto de las valencias y los combierte en una array de numeros\n                jsonDatosElementos[i].repeticion,                       //Coge del elemento i la repetición y se la pasa al objeto\n                jsonDatosElementos[i].puntos,                           //Coge del elemento i los grupos y se la pasa al objeto\n                jsonDatosElementos[i].grupo,                            //Coge del elemento i el grupo y se la pasa al objeto\n                jsonDatosElementos[i].tipo\n\n            );\n\n        arrayContenedorObjetos.push(nuevoElemento);     //Añade a el array el nuebo objeto que se a creado\n\n\n    }\n\n    return arrayContenedorObjetos;          //Devuelve el array que contiene todos los objetos\n\n}\n\n//Crea la baraja, es decir; añade un objeto por cada repetición\nfunction crearBarajaOrdenada(elementos) {\n\n    var array = [];//Definir el Array que almacenra los numeros\n\n    //REpetir una vez por cada elemento\n    for (var i = 0; i < elementos.length; i++) {\n\n        //Repetir tantas veces como numero de repeticiones tenga el elemento\n        for (var j = 0; j < elementos[i].repeticion; j++) {\n\n            array.push(elementos[i]);    //Guardar el objeto del elemento en el array que almacena los números\n\n        }\n    }\n\n    return array;   //Devolver Array de aleatorios\n}\n\n//Crear Aleatorio se le pasan el minimo y el máximo\nfunction random(min, max) {\n\n    return Math.floor((Math.random() * (max - min + 1)) + min); //Devuelve el numero aleatorio\n\n}\nexport { noMetales, arrayClases };\n","/home/javi/Programacion/Web/Formulacion/Client/src/EquivalenciasNombres.js",["195","196"],"import { hidruro } from \"./palabrasClaves\";\nimport { oxido } from \"./palabrasClaves\";\n\nimport { noMetales, arrayClases } from './main'\n\nimport buscarElementoPorSimbolo from \"./BuscarElementoConSimbolo\";\n\nimport comprobarCompuestoBinario from \"./compuestoBinario\";\n\nfunction nombresEquivalentes(nombre) {\n\n    if (typeof nombre != \"string\") {\n\n        return false;\n\n    }\n\n    nombre = nombre.toLocaleLowerCase();\n\n    var nombreAutentico = \"\";\n\n    //Si nombre es igual a ...\n    switch (nombre) {\n        //hidruro\n        case hidruro:\n\n            nombreAutentico = \"hidrógeno\";\n            break;\n\n        //oxido\n        case oxido:\n            nombreAutentico = \"oxígeno\";\n            break;\n\n    }\n    //Repetir una vez por toda la longitud de array anfigenos alogenos\n    for (var i = 0; i < noMetales.length; i++) {\n\n        //Si el nombre actual es igual al nuevo nombre del elemento\n        if (nombre === noMetales[i].nuevoNombreElemento.toLocaleLowerCase()) {\n\n            // Devolvemos el nombrea autentico (fluor, fluoruro) y lo pasamao a minusculas\n            nombreAutentico = buscarElementoPorSimbolo(arrayClases, noMetales[i].sq).nombre.toLocaleLowerCase();\n\n\n        }\n\n    }\n\n    return nombreAutentico;\n\n}\n\nexport default nombresEquivalentes;","/home/javi/Programacion/Web/Formulacion/Client/src/jsonNoMetales.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/jsonElementos.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/pasarjsonAnfigenosHalogenos.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/barajar.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/BuscarElementoConSimbolo.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/objetosElementos.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/objetoNoMetal.js",[],"/home/javi/Programacion/Web/Formulacion/Client/src/TablaRecords.js",["197"],"var React = require('react');   //Activa REACt\nconst { default: FilaRecords } = require('./FilaRecords');\n\nclass TablaRecords extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        //Crea una array que almacena el contenido de la tabla\n        var contenidoTabla = [];\n\n        //Copia records\n        var records = this.props.records;\n        //Se repite una vez por cada uno de los records\n        for (var i = 0; i < records.length; i++) {\n\n            //Añade el numero más uno para edivar que salga el número cero, los puntos y el nombr ede usuaroi\n            contenidoTabla.push(<FilaRecords key={i + records[i].nick} n={i + 1} nick={records[i].nick} puntos={records[i].puntos} />);\n            //Hay que darle un valor a el key para que react no confunada los elementos del DOM \n        }\n\n\n\n        return (\n\n\n            <table id=\"Tabla_Records\">\n\n                <tbody>\n                    <tr>\n                        <th>POSICIÓN</th>\n                        <th>NICKNAME</th>\n                        <th>PUNTOS</th>\n                    </tr>\n\n                    {//Enseña todos los contenidos de la tabal\n\n                        contenidoTabla.map((v) => {\n                            return (v);\n                        })\n\n                    }\n                </tbody>\n            </table>\n\n        )\n\n\n    }\n}\n\nexport default TablaRecords","/home/javi/Programacion/Web/Formulacion/Client/src/FilaRecords.js",["198"],"var React = require('react');\n\nclass FilaRecords extends React.Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n\n\n        return (<tr>\n\n            <td>{this.props.n}</td>\n\n            <td>{this.props.nick}</td>\n\n            <td>{this.props.puntos}</td>\n        </tr>)\n    }\n}\n\nexport default FilaRecords;",{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":16,"column":8,"nodeType":"205","messageId":"206","endLine":16,"endColumn":22},{"ruleId":"207","severity":1,"message":"208","line":6,"column":5,"nodeType":"209","messageId":"210","endLine":9,"endColumn":6},{"ruleId":"207","severity":1,"message":"208","line":6,"column":5,"nodeType":"209","messageId":"210","endLine":10,"endColumn":6},{"ruleId":"211","severity":1,"message":"212","line":34,"column":9,"nodeType":"213","messageId":"214","endLine":34,"endColumn":19},{"ruleId":"211","severity":1,"message":"212","line":40,"column":13,"nodeType":"213","messageId":"214","endLine":40,"endColumn":23},{"ruleId":"207","severity":1,"message":"208","line":8,"column":5,"nodeType":"209","messageId":"210","endLine":10,"endColumn":6},{"ruleId":"215","severity":1,"message":"216","line":16,"column":30,"nodeType":"217","messageId":"218","endLine":16,"endColumn":32},{"ruleId":"203","severity":1,"message":"219","line":21,"column":7,"nodeType":"205","messageId":"206","endLine":21,"endColumn":16},{"ruleId":"203","severity":1,"message":"220","line":23,"column":7,"nodeType":"205","messageId":"206","endLine":23,"endColumn":16},{"ruleId":"221","severity":1,"message":"222","line":50,"column":33,"nodeType":"223","endLine":50,"endColumn":211},{"ruleId":"221","severity":1,"message":"222","line":72,"column":37,"nodeType":"223","endLine":72,"endColumn":184},{"ruleId":"203","severity":1,"message":"224","line":25,"column":11,"nodeType":"205","messageId":"206","endLine":25,"endColumn":25},{"ruleId":"225","severity":1,"message":"226","line":139,"column":13,"nodeType":"227","messageId":"228","endLine":139,"endColumn":26},{"ruleId":"215","severity":1,"message":"229","line":161,"column":72,"nodeType":"217","messageId":"218","endLine":161,"endColumn":74},{"ruleId":"215","severity":1,"message":"216","line":275,"column":51,"nodeType":"217","messageId":"218","endLine":275,"endColumn":53},{"ruleId":"215","severity":1,"message":"216","line":281,"column":51,"nodeType":"217","messageId":"218","endLine":281,"endColumn":53},{"ruleId":"230","severity":1,"message":"231","line":30,"column":33,"nodeType":"232","messageId":"233","endLine":38,"endColumn":22},{"ruleId":"215","severity":1,"message":"216","line":23,"column":41,"nodeType":"217","messageId":"218","endLine":23,"endColumn":43},{"ruleId":"215","severity":1,"message":"216","line":31,"column":141,"nodeType":"217","messageId":"218","endLine":31,"endColumn":143},{"ruleId":"203","severity":1,"message":"234","line":45,"column":5,"nodeType":"205","messageId":"206","endLine":45,"endColumn":24},{"ruleId":"203","severity":1,"message":"235","line":1,"column":10,"nodeType":"205","messageId":"206","endLine":1,"endColumn":13},{"ruleId":"236","severity":1,"message":"237","line":19,"column":5,"nodeType":"238","messageId":"239","endLine":69,"endColumn":6},{"ruleId":"215","severity":1,"message":"216","line":12,"column":44,"nodeType":"217","messageId":"218","endLine":12,"endColumn":46},{"ruleId":"203","severity":1,"message":"240","line":20,"column":9,"nodeType":"205","messageId":"206","endLine":20,"endColumn":26},{"ruleId":"236","severity":1,"message":"237","line":31,"column":9,"nodeType":"238","messageId":"239","endLine":44,"endColumn":10},{"ruleId":"230","severity":1,"message":"241","line":29,"column":13,"nodeType":"242","messageId":"233","endLine":68,"endColumn":14},{"ruleId":"203","severity":1,"message":"243","line":3,"column":10,"nodeType":"205","messageId":"206","endLine":3,"endColumn":43},{"ruleId":"225","severity":1,"message":"226","line":28,"column":5,"nodeType":"227","messageId":"228","endLine":28,"endColumn":18},{"ruleId":"203","severity":1,"message":"244","line":19,"column":5,"nodeType":"205","messageId":"206","endLine":19,"endColumn":11},{"ruleId":"203","severity":1,"message":"245","line":21,"column":5,"nodeType":"205","messageId":"206","endLine":21,"endColumn":26},{"ruleId":"203","severity":1,"message":"246","line":128,"column":10,"nodeType":"205","messageId":"206","endLine":128,"endColumn":16},{"ruleId":"203","severity":1,"message":"247","line":8,"column":8,"nodeType":"205","messageId":"206","endLine":8,"endColumn":33},{"ruleId":"236","severity":1,"message":"237","line":23,"column":5,"nodeType":"238","messageId":"239","endLine":35,"endColumn":6},{"ruleId":"207","severity":1,"message":"208","line":7,"column":5,"nodeType":"209","messageId":"210","endLine":9,"endColumn":6},{"ruleId":"207","severity":1,"message":"208","line":5,"column":5,"nodeType":"209","messageId":"210","endLine":7,"endColumn":6},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'numeroDeCartas' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'halogenos' is assigned a value but never used.","'anfigenos' is assigned a value but never used.","jsx-a11y/alt-text","<input> elements with type=\"image\" must have a text alternative through the `alt`, `aria-label`, or `aria-labelledby` prop.","JSXOpeningElement","'errorCompuesto' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","Expected '===' and instead saw '=='.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i', 'resultadoFuncion', 'i'.","FunctionExpression","unsafeRefs","'totalDeCartasUsadas' is assigned a value but never used.","'exp' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'binarioIncorrecto' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'i'.","FunctionDeclaration","'comprobarSiPuedeGenerarCompuestos' is defined but never used.","'puntos' is defined but never used.","'numeroElementosACoger' is assigned a value but never used.","'random' is defined but never used.","'comprobarCompuestoBinario' is defined but never used.","no-global-assign","no-unsafe-negation"]